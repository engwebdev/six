<?php
/** @noinspection PhpUndefinedClassInspection */
/** @noinspection PhpFullyQualifiedNameUsageInspection */
/** @noinspection PhpUnusedAliasInspection */

namespace App\Models {

    use Database\Factories\CategoryFactory;
    use Database\Factories\ShopFactory;
    use Database\Factories\TagFactory;
    use Database\Factories\TeamFactory;
    use Database\Factories\UserFactory;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use Illuminate\Database\Eloquent\Relations\BelongsToMany;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Notifications\DatabaseNotification;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Support\Carbon;
    use LaravelIdea\Helper\App\Models\_IH_Category_C;
    use LaravelIdea\Helper\App\Models\_IH_Category_QB;
    use LaravelIdea\Helper\App\Models\_IH_Membership_C;
    use LaravelIdea\Helper\App\Models\_IH_Membership_QB;
    use LaravelIdea\Helper\App\Models\_IH_Shop_C;
    use LaravelIdea\Helper\App\Models\_IH_shop_C;
    use LaravelIdea\Helper\App\Models\_IH_Shop_QB;
    use LaravelIdea\Helper\App\Models\_IH_shop_QB;
    use LaravelIdea\Helper\App\Models\_IH_Tag2_C;
    use LaravelIdea\Helper\App\Models\_IH_Tag2_QB;
    use LaravelIdea\Helper\App\Models\_IH_tag_C;
    use LaravelIdea\Helper\App\Models\_IH_Tag_C;
    use LaravelIdea\Helper\App\Models\_IH_tag_QB;
    use LaravelIdea\Helper\App\Models\_IH_Tag_QB;
    use LaravelIdea\Helper\App\Models\_IH_TeamInvitation_C;
    use LaravelIdea\Helper\App\Models\_IH_TeamInvitation_QB;
    use LaravelIdea\Helper\App\Models\_IH_Team_C;
    use LaravelIdea\Helper\App\Models\_IH_Team_QB;
    use LaravelIdea\Helper\App\Models\_IH_User_C;
    use LaravelIdea\Helper\App\Models\_IH_User_QB;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_C;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_QB;
    
    /**
     * @property int $id
     * @property string|null $category_name
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property _IH_Shop_C|Shop[] $shops
     * @property-read int $shops_count
     * @method HasMany|_IH_Shop_QB shops()
     * @method _IH_Category_QB newModelQuery()
     * @method _IH_Category_QB newQuery()
     * @method static _IH_Category_QB query()
     * @method static _IH_Category_C|Category[] all()
     * @method static _IH_Category_QB whereId($value)
     * @method static _IH_Category_QB whereCategoryName($value)
     * @method static _IH_Category_QB whereDeletedAt($value)
     * @method static _IH_Category_QB whereCreatedAt($value)
     * @method static _IH_Category_QB whereUpdatedAt($value)
     * @method static Category baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Category create(array $attributes = [])
     * @method static _IH_Category_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Category_C|Category[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Category_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Category_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Category|null find($id, array $columns = ['*'])
     * @method static _IH_Category_C|Category[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Category findOrFail($id, array $columns = ['*'])
     * @method static Category findOrNew($id, array $columns = ['*'])
     * @method static Category first(array|string $columns = ['*'])
     * @method static Category firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Category firstOrCreate(array $attributes = [], array $values = [])
     * @method static Category firstOrFail(array $columns = ['*'])
     * @method static Category firstOrNew(array $attributes = [], array $values = [])
     * @method static Category firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Category forceCreate(array $attributes)
     * @method static _IH_Category_C|Category[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Category_C|Category[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Category getModel()
     * @method static Category[] getModels(array|string $columns = ['*'])
     * @method static _IH_Category_QB getQuery()
     * @method static _IH_Category_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Category_C|Category[] hydrate(array $items)
     * @method static _IH_Category_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Category_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Category_QB latest(Expression|string $column = null)
     * @method static _IH_Category_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Category_QB limit(int $value)
     * @method static Category make(array $attributes = [])
     * @method static Category newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Category_QB offset(int $value)
     * @method static _IH_Category_QB oldest(Expression|string $column = null)
     * @method static _IH_Category_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Category_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Category_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Category[]|_IH_Category_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Category_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Category_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Category_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Category[]|_IH_Category_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Category_QB skip(int $value)
     * @method static Category sole(array|string $columns = ['*'])
     * @method static _IH_Category_QB take(int $value)
     * @method static _IH_Category_QB tap(callable $callback)
     * @method static _IH_Category_QB truncate()
     * @method static _IH_Category_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Category updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Category_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Category_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Category_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Category_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Category_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Category_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Category_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Category_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereKey($id)
     * @method static _IH_Category_QB whereKeyNot($id)
     * @method static _IH_Category_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Category_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Category_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Category_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Category_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Category_QB withCasts(array $casts)
     * @method static _IH_Category_QB withCount($relations)
     * @method static _IH_Category_QB withExists(array|string $relation)
     * @method static _IH_Category_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Category_QB withMax(array|string $relation, string $column)
     * @method static _IH_Category_QB withMin(array|string $relation, string $column)
     * @method static _IH_Category_QB withOnly($relations)
     * @method static _IH_Category_QB withSum(array|string $relation, string $column)
     * @method static _IH_Category_QB without($relations)
     * @method static _IH_Category_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Category_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Category_QB withTrashed()
     * @method static _IH_Category_QB onlyTrashed()
     * @method static _IH_Category_QB withoutTrashed()
     * @method static CategoryFactory factory(...$parameters)
     */
    class Category extends Model {}
    
    /**
     * @method _IH_Membership_QB newModelQuery()
     * @method _IH_Membership_QB newQuery()
     * @method static _IH_Membership_QB query()
     * @method static _IH_Membership_C|Membership[] all()
     * @method static Membership baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Membership create(array $attributes = [])
     * @method static _IH_Membership_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Membership_C|Membership[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Membership_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Membership_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Membership|null find($id, array $columns = ['*'])
     * @method static _IH_Membership_C|Membership[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Membership findOrFail($id, array $columns = ['*'])
     * @method static Membership findOrNew($id, array $columns = ['*'])
     * @method static Membership first(array|string $columns = ['*'])
     * @method static Membership firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Membership firstOrCreate(array $attributes = [], array $values = [])
     * @method static Membership firstOrFail(array $columns = ['*'])
     * @method static Membership firstOrNew(array $attributes = [], array $values = [])
     * @method static Membership firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Membership forceCreate(array $attributes)
     * @method static _IH_Membership_C|Membership[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Membership_C|Membership[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Membership getModel()
     * @method static Membership[] getModels(array|string $columns = ['*'])
     * @method static _IH_Membership_QB getQuery()
     * @method static _IH_Membership_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Membership_C|Membership[] hydrate(array $items)
     * @method static _IH_Membership_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Membership_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Membership_QB latest(Expression|string $column = null)
     * @method static _IH_Membership_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Membership_QB limit(int $value)
     * @method static Membership make(array $attributes = [])
     * @method static Membership newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Membership_QB offset(int $value)
     * @method static _IH_Membership_QB oldest(Expression|string $column = null)
     * @method static _IH_Membership_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Membership_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Membership_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Membership[]|_IH_Membership_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Membership_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Membership_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Membership_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Membership[]|_IH_Membership_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Membership_QB skip(int $value)
     * @method static Membership sole(array|string $columns = ['*'])
     * @method static _IH_Membership_QB take(int $value)
     * @method static _IH_Membership_QB tap(callable $callback)
     * @method static _IH_Membership_QB truncate()
     * @method static _IH_Membership_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Membership updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Membership_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Membership_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Membership_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Membership_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Membership_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Membership_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Membership_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Membership_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereKey($id)
     * @method static _IH_Membership_QB whereKeyNot($id)
     * @method static _IH_Membership_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Membership_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Membership_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Membership_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Membership_QB withCasts(array $casts)
     * @method static _IH_Membership_QB withCount($relations)
     * @method static _IH_Membership_QB withExists(array|string $relation)
     * @method static _IH_Membership_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Membership_QB withMax(array|string $relation, string $column)
     * @method static _IH_Membership_QB withMin(array|string $relation, string $column)
     * @method static _IH_Membership_QB withOnly($relations)
     * @method static _IH_Membership_QB withSum(array|string $relation, string $column)
     * @method static _IH_Membership_QB without($relations)
     * @method static _IH_Membership_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Membership_QB withoutGlobalScopes(array $scopes = null)
     */
    class Membership extends Model {}
    
    /**
     * @property int $id
     * @property int|null $parent_id
     * @property string $name
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property Carbon|null $deleted_at
     * @property int|null $category_id
     * @property Category $category
     * @method BelongsTo|_IH_Category_QB category()
     * @property _IH_Shop_C|Shop[] $child
     * @property-read int $child_count
     * @method HasMany|_IH_Shop_QB child()
     * @property Shop $parent
     * @method BelongsTo|_IH_Shop_QB parent()
     * @property _IH_tag_C|tag[] $tags
     * @property-read int $tags_count
     * @method BelongsToMany|_IH_tag_QB tags()
     * @property _IH_tag_C|tag[] $tagsByAccept
     * @property-read int $tags_by_accept_count
     * @method BelongsToMany|_IH_tag_QB tagsByAccept()
     * @method _IH_Shop_QB newModelQuery()
     * @method _IH_Shop_QB newQuery()
     * @method static _IH_Shop_QB query()
     * @method static _IH_Shop_C|Shop[] all()
     * @method static _IH_Shop_QB whereId($value)
     * @method static _IH_Shop_QB whereParentId($value)
     * @method static _IH_Shop_QB whereName($value)
     * @method static _IH_Shop_QB whereCreatedAt($value)
     * @method static _IH_Shop_QB whereUpdatedAt($value)
     * @method static _IH_Shop_QB whereDeletedAt($value)
     * @method static _IH_Shop_QB whereCategoryId($value)
     * @method static Shop baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Shop create(array $attributes = [])
     * @method static _IH_Shop_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Shop_C|Shop[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Shop_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Shop_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Shop|null find($id, array $columns = ['*'])
     * @method static _IH_Shop_C|Shop[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Shop findOrFail($id, array $columns = ['*'])
     * @method static Shop findOrNew($id, array $columns = ['*'])
     * @method static Shop first(array|string $columns = ['*'])
     * @method static Shop firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Shop firstOrCreate(array $attributes = [], array $values = [])
     * @method static Shop firstOrFail(array $columns = ['*'])
     * @method static Shop firstOrNew(array $attributes = [], array $values = [])
     * @method static Shop firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Shop forceCreate(array $attributes)
     * @method static _IH_Shop_C|Shop[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Shop_C|Shop[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Shop getModel()
     * @method static Shop[] getModels(array|string $columns = ['*'])
     * @method static _IH_Shop_QB getQuery()
     * @method static _IH_Shop_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Shop_C|Shop[] hydrate(array $items)
     * @method static _IH_Shop_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Shop_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Shop_QB latest(Expression|string $column = null)
     * @method static _IH_Shop_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Shop_QB limit(int $value)
     * @method static Shop make(array $attributes = [])
     * @method static Shop newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Shop_QB offset(int $value)
     * @method static _IH_Shop_QB oldest(Expression|string $column = null)
     * @method static _IH_Shop_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Shop_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Shop_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Shop[]|_IH_Shop_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Shop_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Shop_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Shop_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Shop[]|_IH_Shop_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Shop_QB skip(int $value)
     * @method static Shop sole(array|string $columns = ['*'])
     * @method static _IH_Shop_QB take(int $value)
     * @method static _IH_Shop_QB tap(callable $callback)
     * @method static _IH_Shop_QB truncate()
     * @method static _IH_Shop_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Shop updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Shop_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Shop_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Shop_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Shop_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Shop_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Shop_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Shop_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Shop_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereKey($id)
     * @method static _IH_Shop_QB whereKeyNot($id)
     * @method static _IH_Shop_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Shop_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Shop_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Shop_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Shop_QB withCasts(array $casts)
     * @method static _IH_Shop_QB withCount($relations)
     * @method static _IH_Shop_QB withExists(array|string $relation)
     * @method static _IH_Shop_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Shop_QB withMax(array|string $relation, string $column)
     * @method static _IH_Shop_QB withMin(array|string $relation, string $column)
     * @method static _IH_Shop_QB withOnly($relations)
     * @method static _IH_Shop_QB withSum(array|string $relation, string $column)
     * @method static _IH_Shop_QB without($relations)
     * @method static _IH_Shop_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Shop_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Shop_QB withTrashed()
     * @method static _IH_Shop_QB onlyTrashed()
     * @method static _IH_Shop_QB withoutTrashed()
     * @method static ShopFactory factory(...$parameters)
     */
    class Shop extends Model {}
    
    /**
     * @property int $id
     * @property string|null $tag_name
     * @property bool|null $tag_accept_status
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property _IH_shop_C|shop[] $shops
     * @property-read int $shops_count
     * @method BelongsToMany|_IH_shop_QB shops()
     * @property _IH_shop_C|shop[] $shopsByAccept
     * @property-read int $shops_by_accept_count
     * @method BelongsToMany|_IH_shop_QB shopsByAccept()
     * @method _IH_Tag_QB newModelQuery()
     * @method _IH_Tag_QB newQuery()
     * @method static _IH_Tag_QB query()
     * @method static _IH_Tag_C|Tag[] all()
     * @method static _IH_Tag_QB whereId($value)
     * @method static _IH_Tag_QB whereTagName($value)
     * @method static _IH_Tag_QB whereTagAcceptStatus($value)
     * @method static _IH_Tag_QB whereDeletedAt($value)
     * @method static _IH_Tag_QB whereCreatedAt($value)
     * @method static _IH_Tag_QB whereUpdatedAt($value)
     * @method static Tag baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Tag create(array $attributes = [])
     * @method static _IH_Tag_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tag_C|Tag[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Tag_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Tag_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Tag|null find($id, array $columns = ['*'])
     * @method static _IH_Tag_C|Tag[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Tag findOrFail($id, array $columns = ['*'])
     * @method static Tag findOrNew($id, array $columns = ['*'])
     * @method static Tag first(array|string $columns = ['*'])
     * @method static Tag firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Tag firstOrCreate(array $attributes = [], array $values = [])
     * @method static Tag firstOrFail(array $columns = ['*'])
     * @method static Tag firstOrNew(array $attributes = [], array $values = [])
     * @method static Tag firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Tag forceCreate(array $attributes)
     * @method static _IH_Tag_C|Tag[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Tag_C|Tag[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Tag getModel()
     * @method static Tag[] getModels(array|string $columns = ['*'])
     * @method static _IH_Tag_QB getQuery()
     * @method static _IH_Tag_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Tag_C|Tag[] hydrate(array $items)
     * @method static _IH_Tag_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Tag_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Tag_QB latest(Expression|string $column = null)
     * @method static _IH_Tag_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tag_QB limit(int $value)
     * @method static Tag make(array $attributes = [])
     * @method static Tag newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Tag_QB offset(int $value)
     * @method static _IH_Tag_QB oldest(Expression|string $column = null)
     * @method static _IH_Tag_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Tag_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Tag_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Tag[]|_IH_Tag_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Tag_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tag_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Tag_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Tag[]|_IH_Tag_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Tag_QB skip(int $value)
     * @method static Tag sole(array|string $columns = ['*'])
     * @method static _IH_Tag_QB take(int $value)
     * @method static _IH_Tag_QB tap(callable $callback)
     * @method static _IH_Tag_QB truncate()
     * @method static _IH_Tag_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Tag updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Tag_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Tag_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Tag_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Tag_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Tag_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Tag_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Tag_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Tag_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereKey($id)
     * @method static _IH_Tag_QB whereKeyNot($id)
     * @method static _IH_Tag_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Tag_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Tag_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Tag_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Tag_QB withCasts(array $casts)
     * @method static _IH_Tag_QB withCount($relations)
     * @method static _IH_Tag_QB withExists(array|string $relation)
     * @method static _IH_Tag_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Tag_QB withMax(array|string $relation, string $column)
     * @method static _IH_Tag_QB withMin(array|string $relation, string $column)
     * @method static _IH_Tag_QB withOnly($relations)
     * @method static _IH_Tag_QB withSum(array|string $relation, string $column)
     * @method static _IH_Tag_QB without($relations)
     * @method static _IH_Tag_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Tag_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Tag_QB withTrashed()
     * @method static _IH_Tag_QB onlyTrashed()
     * @method static _IH_Tag_QB withoutTrashed()
     * @method static TagFactory factory(...$parameters)
     */
    class Tag extends Model {}
    
    /**
     * @method _IH_Tag2_QB newModelQuery()
     * @method _IH_Tag2_QB newQuery()
     * @method static _IH_Tag2_QB query()
     * @method static _IH_Tag2_C|Tag2[] all()
     * @method static Tag2 baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Tag2 create(array $attributes = [])
     * @method static _IH_Tag2_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tag2_C|Tag2[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Tag2_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Tag2_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Tag2|null find($id, array $columns = ['*'])
     * @method static _IH_Tag2_C|Tag2[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Tag2 findOrFail($id, array $columns = ['*'])
     * @method static Tag2 findOrNew($id, array $columns = ['*'])
     * @method static Tag2 first(array|string $columns = ['*'])
     * @method static Tag2 firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Tag2 firstOrCreate(array $attributes = [], array $values = [])
     * @method static Tag2 firstOrFail(array $columns = ['*'])
     * @method static Tag2 firstOrNew(array $attributes = [], array $values = [])
     * @method static Tag2 firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Tag2 forceCreate(array $attributes)
     * @method static _IH_Tag2_C|Tag2[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Tag2_C|Tag2[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Tag2 getModel()
     * @method static Tag2[] getModels(array|string $columns = ['*'])
     * @method static _IH_Tag2_QB getQuery()
     * @method static _IH_Tag2_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Tag2_C|Tag2[] hydrate(array $items)
     * @method static _IH_Tag2_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Tag2_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Tag2_QB latest(Expression|string $column = null)
     * @method static _IH_Tag2_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tag2_QB limit(int $value)
     * @method static Tag2 make(array $attributes = [])
     * @method static Tag2 newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Tag2_QB offset(int $value)
     * @method static _IH_Tag2_QB oldest(Expression|string $column = null)
     * @method static _IH_Tag2_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Tag2_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Tag2_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Tag2[]|_IH_Tag2_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Tag2_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tag2_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Tag2_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Tag2[]|_IH_Tag2_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Tag2_QB skip(int $value)
     * @method static Tag2 sole(array|string $columns = ['*'])
     * @method static _IH_Tag2_QB take(int $value)
     * @method static _IH_Tag2_QB tap(callable $callback)
     * @method static _IH_Tag2_QB truncate()
     * @method static _IH_Tag2_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Tag2 updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Tag2_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Tag2_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag2_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag2_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Tag2_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Tag2_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Tag2_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag2_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Tag2_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Tag2_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag2_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag2_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag2_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereKey($id)
     * @method static _IH_Tag2_QB whereKeyNot($id)
     * @method static _IH_Tag2_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag2_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Tag2_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag2_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag2_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Tag2_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Tag2_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Tag2_QB withCasts(array $casts)
     * @method static _IH_Tag2_QB withCount($relations)
     * @method static _IH_Tag2_QB withExists(array|string $relation)
     * @method static _IH_Tag2_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Tag2_QB withMax(array|string $relation, string $column)
     * @method static _IH_Tag2_QB withMin(array|string $relation, string $column)
     * @method static _IH_Tag2_QB withOnly($relations)
     * @method static _IH_Tag2_QB withSum(array|string $relation, string $column)
     * @method static _IH_Tag2_QB without($relations)
     * @method static _IH_Tag2_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Tag2_QB withoutGlobalScopes(array $scopes = null)
     */
    class Tag2 extends Model {}
    
    /**
     * @method _IH_Team_QB newModelQuery()
     * @method _IH_Team_QB newQuery()
     * @method static _IH_Team_QB query()
     * @method static _IH_Team_C|Team[] all()
     * @method static Team baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Team create(array $attributes = [])
     * @method static _IH_Team_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Team_C|Team[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Team_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Team_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Team|null find($id, array $columns = ['*'])
     * @method static _IH_Team_C|Team[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Team findOrFail($id, array $columns = ['*'])
     * @method static Team findOrNew($id, array $columns = ['*'])
     * @method static Team first(array|string $columns = ['*'])
     * @method static Team firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Team firstOrCreate(array $attributes = [], array $values = [])
     * @method static Team firstOrFail(array $columns = ['*'])
     * @method static Team firstOrNew(array $attributes = [], array $values = [])
     * @method static Team firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Team forceCreate(array $attributes)
     * @method static _IH_Team_C|Team[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Team_C|Team[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Team getModel()
     * @method static Team[] getModels(array|string $columns = ['*'])
     * @method static _IH_Team_QB getQuery()
     * @method static _IH_Team_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Team_C|Team[] hydrate(array $items)
     * @method static _IH_Team_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Team_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Team_QB latest(Expression|string $column = null)
     * @method static _IH_Team_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Team_QB limit(int $value)
     * @method static Team make(array $attributes = [])
     * @method static Team newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Team_QB offset(int $value)
     * @method static _IH_Team_QB oldest(Expression|string $column = null)
     * @method static _IH_Team_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Team_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Team_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Team[]|_IH_Team_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Team_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Team_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Team_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Team[]|_IH_Team_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Team_QB skip(int $value)
     * @method static Team sole(array|string $columns = ['*'])
     * @method static _IH_Team_QB take(int $value)
     * @method static _IH_Team_QB tap(callable $callback)
     * @method static _IH_Team_QB truncate()
     * @method static _IH_Team_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Team updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Team_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Team_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Team_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Team_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Team_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Team_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Team_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Team_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereKey($id)
     * @method static _IH_Team_QB whereKeyNot($id)
     * @method static _IH_Team_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Team_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Team_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Team_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Team_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Team_QB withCasts(array $casts)
     * @method static _IH_Team_QB withCount($relations)
     * @method static _IH_Team_QB withExists(array|string $relation)
     * @method static _IH_Team_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Team_QB withMax(array|string $relation, string $column)
     * @method static _IH_Team_QB withMin(array|string $relation, string $column)
     * @method static _IH_Team_QB withOnly($relations)
     * @method static _IH_Team_QB withSum(array|string $relation, string $column)
     * @method static _IH_Team_QB without($relations)
     * @method static _IH_Team_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Team_QB withoutGlobalScopes(array $scopes = null)
     * @method static TeamFactory factory(...$parameters)
     */
    class Team extends Model {}
    
    /**
     * @method _IH_TeamInvitation_QB newModelQuery()
     * @method _IH_TeamInvitation_QB newQuery()
     * @method static _IH_TeamInvitation_QB query()
     * @method static _IH_TeamInvitation_C|TeamInvitation[] all()
     * @method static TeamInvitation baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static TeamInvitation create(array $attributes = [])
     * @method static _IH_TeamInvitation_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_TeamInvitation_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_TeamInvitation_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static TeamInvitation|null find($id, array $columns = ['*'])
     * @method static _IH_TeamInvitation_C|TeamInvitation[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static TeamInvitation findOrFail($id, array $columns = ['*'])
     * @method static TeamInvitation findOrNew($id, array $columns = ['*'])
     * @method static TeamInvitation first(array|string $columns = ['*'])
     * @method static TeamInvitation firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static TeamInvitation firstOrCreate(array $attributes = [], array $values = [])
     * @method static TeamInvitation firstOrFail(array $columns = ['*'])
     * @method static TeamInvitation firstOrNew(array $attributes = [], array $values = [])
     * @method static TeamInvitation firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static TeamInvitation forceCreate(array $attributes)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_TeamInvitation_C|TeamInvitation[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static TeamInvitation getModel()
     * @method static TeamInvitation[] getModels(array|string $columns = ['*'])
     * @method static _IH_TeamInvitation_QB getQuery()
     * @method static _IH_TeamInvitation_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] hydrate(array $items)
     * @method static _IH_TeamInvitation_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_TeamInvitation_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_TeamInvitation_QB latest(Expression|string $column = null)
     * @method static _IH_TeamInvitation_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_QB limit(int $value)
     * @method static TeamInvitation make(array $attributes = [])
     * @method static TeamInvitation newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_TeamInvitation_QB offset(int $value)
     * @method static _IH_TeamInvitation_QB oldest(Expression|string $column = null)
     * @method static _IH_TeamInvitation_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_TeamInvitation_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_TeamInvitation_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|TeamInvitation[]|_IH_TeamInvitation_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_TeamInvitation_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_QB select(array|mixed $columns = ['*'])
     * @method static _IH_TeamInvitation_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|TeamInvitation[]|_IH_TeamInvitation_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_TeamInvitation_QB skip(int $value)
     * @method static TeamInvitation sole(array|string $columns = ['*'])
     * @method static _IH_TeamInvitation_QB take(int $value)
     * @method static _IH_TeamInvitation_QB tap(callable $callback)
     * @method static _IH_TeamInvitation_QB truncate()
     * @method static _IH_TeamInvitation_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static TeamInvitation updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_TeamInvitation_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_TeamInvitation_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_TeamInvitation_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_TeamInvitation_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_TeamInvitation_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_TeamInvitation_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereKey($id)
     * @method static _IH_TeamInvitation_QB whereKeyNot($id)
     * @method static _IH_TeamInvitation_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_TeamInvitation_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_TeamInvitation_QB withAvg(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withCasts(array $casts)
     * @method static _IH_TeamInvitation_QB withCount($relations)
     * @method static _IH_TeamInvitation_QB withExists(array|string $relation)
     * @method static _IH_TeamInvitation_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_TeamInvitation_QB withMax(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withMin(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withOnly($relations)
     * @method static _IH_TeamInvitation_QB withSum(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB without($relations)
     * @method static _IH_TeamInvitation_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_TeamInvitation_QB withoutGlobalScopes(array $scopes = null)
     */
    class TeamInvitation extends Model {}
    
    /**
     * @property int $id
     * @property string|null $name
     * @property string|null $email
     * @property Carbon|null $email_verified_at
     * @property string|null $password
     * @property string|null $remember_token
     * @property int|null $current_team_id
     * @property string|null $profile_photo_path
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property string|null $two_factor_secret
     * @property string|null $two_factor_recovery_codes
     * @property Carbon|null $deleted_at
     * @property int|null $disable_by
     * @property Carbon|null $disable_at
     * @property string|null $username
     * @property string|null $mobile
     * @property Carbon|null $mobile_verified_at
     * @property string $mobile_verified_code
     * @property Carbon|null $mobile_verified_code_expire_time
     * @property-read string $profile_photo_url
     * @property _IH_DatabaseNotification_C|DatabaseNotification[] $notifications
     * @property-read int $notifications_count
     * @method MorphToMany|_IH_DatabaseNotification_QB notifications()
     * @method _IH_User_QB newModelQuery()
     * @method _IH_User_QB newQuery()
     * @method static _IH_User_QB query()
     * @method static _IH_User_C|User[] all()
     * @method static _IH_User_QB whereId($value)
     * @method static _IH_User_QB whereName($value)
     * @method static _IH_User_QB whereEmail($value)
     * @method static _IH_User_QB whereEmailVerifiedAt($value)
     * @method static _IH_User_QB wherePassword($value)
     * @method static _IH_User_QB whereRememberToken($value)
     * @method static _IH_User_QB whereCurrentTeamId($value)
     * @method static _IH_User_QB whereProfilePhotoPath($value)
     * @method static _IH_User_QB whereCreatedAt($value)
     * @method static _IH_User_QB whereUpdatedAt($value)
     * @method static _IH_User_QB whereTwoFactorSecret($value)
     * @method static _IH_User_QB whereTwoFactorRecoveryCodes($value)
     * @method static _IH_User_QB whereDeletedAt($value)
     * @method static _IH_User_QB whereDisableBy($value)
     * @method static _IH_User_QB whereDisableAt($value)
     * @method static _IH_User_QB whereUsername($value)
     * @method static _IH_User_QB whereMobile($value)
     * @method static _IH_User_QB whereMobileVerifiedAt($value)
     * @method static _IH_User_QB whereMobileVerifiedCode($value)
     * @method static _IH_User_QB whereMobileVerifiedCodeExpireTime($value)
     * @method static User baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static User create(array $attributes = [])
     * @method static _IH_User_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_User_C|User[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_User_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_User_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static User|null find($id, array $columns = ['*'])
     * @method static _IH_User_C|User[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static User findOrFail($id, array $columns = ['*'])
     * @method static User findOrNew($id, array $columns = ['*'])
     * @method static User first(array|string $columns = ['*'])
     * @method static User firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static User firstOrCreate(array $attributes = [], array $values = [])
     * @method static User firstOrFail(array $columns = ['*'])
     * @method static User firstOrNew(array $attributes = [], array $values = [])
     * @method static User firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static User forceCreate(array $attributes)
     * @method static _IH_User_C|User[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_User_C|User[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static User getModel()
     * @method static User[] getModels(array|string $columns = ['*'])
     * @method static _IH_User_QB getQuery()
     * @method static _IH_User_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_User_C|User[] hydrate(array $items)
     * @method static _IH_User_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_User_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_User_QB latest(Expression|string $column = null)
     * @method static _IH_User_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_User_QB limit(int $value)
     * @method static User make(array $attributes = [])
     * @method static User newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_User_QB offset(int $value)
     * @method static _IH_User_QB oldest(Expression|string $column = null)
     * @method static _IH_User_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_User_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_User_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|User[]|_IH_User_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_User_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_User_QB select(array|mixed $columns = ['*'])
     * @method static _IH_User_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|User[]|_IH_User_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_User_QB skip(int $value)
     * @method static User sole(array|string $columns = ['*'])
     * @method static _IH_User_QB take(int $value)
     * @method static _IH_User_QB tap(callable $callback)
     * @method static _IH_User_QB truncate()
     * @method static _IH_User_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static User updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_User_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_User_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_User_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_User_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_User_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_User_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_User_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_User_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_User_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereKey($id)
     * @method static _IH_User_QB whereKeyNot($id)
     * @method static _IH_User_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_User_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_User_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_User_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_User_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_User_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_User_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_User_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_User_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_User_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_User_QB withAvg(array|string $relation, string $column)
     * @method static _IH_User_QB withCasts(array $casts)
     * @method static _IH_User_QB withCount($relations)
     * @method static _IH_User_QB withExists(array|string $relation)
     * @method static _IH_User_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_User_QB withMax(array|string $relation, string $column)
     * @method static _IH_User_QB withMin(array|string $relation, string $column)
     * @method static _IH_User_QB withOnly($relations)
     * @method static _IH_User_QB withSum(array|string $relation, string $column)
     * @method static _IH_User_QB without($relations)
     * @method static _IH_User_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_User_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_User_QB withTrashed()
     * @method static _IH_User_QB onlyTrashed()
     * @method static _IH_User_QB withoutTrashed()
     * @method static UserFactory factory(...$parameters)
     */
    class User extends Model {}
}

namespace Illuminate\Notifications {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_C;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_QB;
    
    /**
     * @property Model $notifiable
     * @method MorphTo notifiable()
     * @method _IH_DatabaseNotification_QB newModelQuery()
     * @method _IH_DatabaseNotification_QB newQuery()
     * @method static _IH_DatabaseNotification_QB query()
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] all()
     * @method static DatabaseNotification baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static DatabaseNotification create(array $attributes = [])
     * @method static _IH_DatabaseNotification_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_DatabaseNotification_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_DatabaseNotification_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static DatabaseNotification|null find($id, array $columns = ['*'])
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static DatabaseNotification findOrFail($id, array $columns = ['*'])
     * @method static DatabaseNotification findOrNew($id, array $columns = ['*'])
     * @method static DatabaseNotification first(array|string $columns = ['*'])
     * @method static DatabaseNotification firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static DatabaseNotification firstOrCreate(array $attributes = [], array $values = [])
     * @method static DatabaseNotification firstOrFail(array $columns = ['*'])
     * @method static DatabaseNotification firstOrNew(array $attributes = [], array $values = [])
     * @method static DatabaseNotification firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static DatabaseNotification forceCreate(array $attributes)
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static DatabaseNotification getModel()
     * @method static DatabaseNotification[] getModels(array|string $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB getQuery()
     * @method static _IH_DatabaseNotification_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] hydrate(array $items)
     * @method static _IH_DatabaseNotification_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_DatabaseNotification_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_DatabaseNotification_QB latest(Expression|string $column = null)
     * @method static _IH_DatabaseNotification_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_DatabaseNotification_QB limit(int $value)
     * @method static DatabaseNotification make(array $attributes = [])
     * @method static DatabaseNotification newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB offset(int $value)
     * @method static _IH_DatabaseNotification_QB oldest(Expression|string $column = null)
     * @method static _IH_DatabaseNotification_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_DatabaseNotification_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_DatabaseNotification_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|DatabaseNotification[]|_IH_DatabaseNotification_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_DatabaseNotification_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_DatabaseNotification_QB select(array|mixed $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|DatabaseNotification[]|_IH_DatabaseNotification_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_DatabaseNotification_QB skip(int $value)
     * @method static DatabaseNotification sole(array|string $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB take(int $value)
     * @method static _IH_DatabaseNotification_QB tap(callable $callback)
     * @method static _IH_DatabaseNotification_QB truncate()
     * @method static _IH_DatabaseNotification_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static DatabaseNotification updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_DatabaseNotification_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_DatabaseNotification_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_DatabaseNotification_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_DatabaseNotification_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_DatabaseNotification_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_DatabaseNotification_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereKey($id)
     * @method static _IH_DatabaseNotification_QB whereKeyNot($id)
     * @method static _IH_DatabaseNotification_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_DatabaseNotification_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_DatabaseNotification_QB withAvg(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB withCasts(array $casts)
     * @method static _IH_DatabaseNotification_QB withCount($relations)
     * @method static _IH_DatabaseNotification_QB withExists(array|string $relation)
     * @method static _IH_DatabaseNotification_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_DatabaseNotification_QB withMax(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB withMin(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB withOnly($relations)
     * @method static _IH_DatabaseNotification_QB withSum(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB without($relations)
     * @method static _IH_DatabaseNotification_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_DatabaseNotification_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_DatabaseNotification_QB read()
     * @method static _IH_DatabaseNotification_QB unread()
     */
    class DatabaseNotification extends Model {}
}

namespace Laravel\Jetstream {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\Laravel\Jetstream\_IH_TeamInvitation_C;
    use LaravelIdea\Helper\Laravel\Jetstream\_IH_TeamInvitation_QB;
    
    /**
     * @method _IH_TeamInvitation_QB newModelQuery()
     * @method _IH_TeamInvitation_QB newQuery()
     * @method static _IH_TeamInvitation_QB query()
     * @method static _IH_TeamInvitation_C|TeamInvitation[] all()
     * @method static TeamInvitation baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static TeamInvitation create(array $attributes = [])
     * @method static _IH_TeamInvitation_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_TeamInvitation_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_TeamInvitation_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static TeamInvitation|null find($id, array $columns = ['*'])
     * @method static _IH_TeamInvitation_C|TeamInvitation[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static TeamInvitation findOrFail($id, array $columns = ['*'])
     * @method static TeamInvitation findOrNew($id, array $columns = ['*'])
     * @method static TeamInvitation first(array|string $columns = ['*'])
     * @method static TeamInvitation firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static TeamInvitation firstOrCreate(array $attributes = [], array $values = [])
     * @method static TeamInvitation firstOrFail(array $columns = ['*'])
     * @method static TeamInvitation firstOrNew(array $attributes = [], array $values = [])
     * @method static TeamInvitation firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static TeamInvitation forceCreate(array $attributes)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_TeamInvitation_C|TeamInvitation[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static TeamInvitation getModel()
     * @method static TeamInvitation[] getModels(array|string $columns = ['*'])
     * @method static _IH_TeamInvitation_QB getQuery()
     * @method static _IH_TeamInvitation_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] hydrate(array $items)
     * @method static _IH_TeamInvitation_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_TeamInvitation_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_TeamInvitation_QB latest(Expression|string $column = null)
     * @method static _IH_TeamInvitation_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_QB limit(int $value)
     * @method static TeamInvitation make(array $attributes = [])
     * @method static TeamInvitation newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_TeamInvitation_QB offset(int $value)
     * @method static _IH_TeamInvitation_QB oldest(Expression|string $column = null)
     * @method static _IH_TeamInvitation_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_TeamInvitation_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_TeamInvitation_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|TeamInvitation[]|_IH_TeamInvitation_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_TeamInvitation_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_QB select(array|mixed $columns = ['*'])
     * @method static _IH_TeamInvitation_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|TeamInvitation[]|_IH_TeamInvitation_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_TeamInvitation_QB skip(int $value)
     * @method static TeamInvitation sole(array|string $columns = ['*'])
     * @method static _IH_TeamInvitation_QB take(int $value)
     * @method static _IH_TeamInvitation_QB tap(callable $callback)
     * @method static _IH_TeamInvitation_QB truncate()
     * @method static _IH_TeamInvitation_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static TeamInvitation updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_TeamInvitation_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_TeamInvitation_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_TeamInvitation_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_TeamInvitation_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_TeamInvitation_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_TeamInvitation_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereKey($id)
     * @method static _IH_TeamInvitation_QB whereKeyNot($id)
     * @method static _IH_TeamInvitation_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_TeamInvitation_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_TeamInvitation_QB withAvg(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withCasts(array $casts)
     * @method static _IH_TeamInvitation_QB withCount($relations)
     * @method static _IH_TeamInvitation_QB withExists(array|string $relation)
     * @method static _IH_TeamInvitation_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_TeamInvitation_QB withMax(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withMin(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withOnly($relations)
     * @method static _IH_TeamInvitation_QB withSum(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB without($relations)
     * @method static _IH_TeamInvitation_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_TeamInvitation_QB withoutGlobalScopes(array $scopes = null)
     */
    class TeamInvitation extends Model {}
}

namespace Laravel\Passport {

    use App\Models\User;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Laravel\Passport\Database\Factories\ClientFactory;
    use LaravelIdea\Helper\App\Models\_IH_User_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_AuthCode_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_AuthCode_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_Client_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_Client_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_PersonalAccessClient_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_PersonalAccessClient_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_RefreshToken_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_RefreshToken_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_Token_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_Token_QB;
    
    /**
     * @method _IH_AuthCode_QB newModelQuery()
     * @method _IH_AuthCode_QB newQuery()
     * @method static _IH_AuthCode_QB query()
     * @method static _IH_AuthCode_C|AuthCode[] all()
     * @method static AuthCode baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static AuthCode create(array $attributes = [])
     * @method static _IH_AuthCode_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_AuthCode_C|AuthCode[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_AuthCode_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_AuthCode_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static AuthCode|null find($id, array $columns = ['*'])
     * @method static _IH_AuthCode_C|AuthCode[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static AuthCode findOrFail($id, array $columns = ['*'])
     * @method static AuthCode findOrNew($id, array $columns = ['*'])
     * @method static AuthCode first(array|string $columns = ['*'])
     * @method static AuthCode firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static AuthCode firstOrCreate(array $attributes = [], array $values = [])
     * @method static AuthCode firstOrFail(array $columns = ['*'])
     * @method static AuthCode firstOrNew(array $attributes = [], array $values = [])
     * @method static AuthCode firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static AuthCode forceCreate(array $attributes)
     * @method static _IH_AuthCode_C|AuthCode[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_AuthCode_C|AuthCode[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static AuthCode getModel()
     * @method static AuthCode[] getModels(array|string $columns = ['*'])
     * @method static _IH_AuthCode_QB getQuery()
     * @method static _IH_AuthCode_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_AuthCode_C|AuthCode[] hydrate(array $items)
     * @method static _IH_AuthCode_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_AuthCode_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_AuthCode_QB latest(Expression|string $column = null)
     * @method static _IH_AuthCode_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_AuthCode_QB limit(int $value)
     * @method static AuthCode make(array $attributes = [])
     * @method static AuthCode newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_AuthCode_QB offset(int $value)
     * @method static _IH_AuthCode_QB oldest(Expression|string $column = null)
     * @method static _IH_AuthCode_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_AuthCode_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_AuthCode_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|AuthCode[]|_IH_AuthCode_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_AuthCode_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_AuthCode_QB select(array|mixed $columns = ['*'])
     * @method static _IH_AuthCode_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|AuthCode[]|_IH_AuthCode_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_AuthCode_QB skip(int $value)
     * @method static AuthCode sole(array|string $columns = ['*'])
     * @method static _IH_AuthCode_QB take(int $value)
     * @method static _IH_AuthCode_QB tap(callable $callback)
     * @method static _IH_AuthCode_QB truncate()
     * @method static _IH_AuthCode_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static AuthCode updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_AuthCode_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_AuthCode_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_AuthCode_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_AuthCode_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_AuthCode_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_AuthCode_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereKey($id)
     * @method static _IH_AuthCode_QB whereKeyNot($id)
     * @method static _IH_AuthCode_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_AuthCode_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_AuthCode_QB withAvg(array|string $relation, string $column)
     * @method static _IH_AuthCode_QB withCasts(array $casts)
     * @method static _IH_AuthCode_QB withCount($relations)
     * @method static _IH_AuthCode_QB withExists(array|string $relation)
     * @method static _IH_AuthCode_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_AuthCode_QB withMax(array|string $relation, string $column)
     * @method static _IH_AuthCode_QB withMin(array|string $relation, string $column)
     * @method static _IH_AuthCode_QB withOnly($relations)
     * @method static _IH_AuthCode_QB withSum(array|string $relation, string $column)
     * @method static _IH_AuthCode_QB without($relations)
     * @method static _IH_AuthCode_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_AuthCode_QB withoutGlobalScopes(array $scopes = null)
     */
    class AuthCode extends Model {}
    
    /**
     * @property-read null|string $plain_secret
     * @method _IH_Client_QB newModelQuery()
     * @method _IH_Client_QB newQuery()
     * @method static _IH_Client_QB query()
     * @method static _IH_Client_C|Client[] all()
     * @method static Client baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Client create(array $attributes = [])
     * @method static _IH_Client_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Client_C|Client[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Client_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Client_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Client|null find($id, array $columns = ['*'])
     * @method static _IH_Client_C|Client[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Client findOrFail($id, array $columns = ['*'])
     * @method static Client findOrNew($id, array $columns = ['*'])
     * @method static Client first(array|string $columns = ['*'])
     * @method static Client firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Client firstOrCreate(array $attributes = [], array $values = [])
     * @method static Client firstOrFail(array $columns = ['*'])
     * @method static Client firstOrNew(array $attributes = [], array $values = [])
     * @method static Client firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Client forceCreate(array $attributes)
     * @method static _IH_Client_C|Client[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Client_C|Client[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Client getModel()
     * @method static Client[] getModels(array|string $columns = ['*'])
     * @method static _IH_Client_QB getQuery()
     * @method static _IH_Client_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Client_C|Client[] hydrate(array $items)
     * @method static _IH_Client_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Client_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Client_QB latest(Expression|string $column = null)
     * @method static _IH_Client_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Client_QB limit(int $value)
     * @method static Client make(array $attributes = [])
     * @method static Client newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Client_QB offset(int $value)
     * @method static _IH_Client_QB oldest(Expression|string $column = null)
     * @method static _IH_Client_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Client_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Client_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Client[]|_IH_Client_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Client_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Client_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Client_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Client[]|_IH_Client_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Client_QB skip(int $value)
     * @method static Client sole(array|string $columns = ['*'])
     * @method static _IH_Client_QB take(int $value)
     * @method static _IH_Client_QB tap(callable $callback)
     * @method static _IH_Client_QB truncate()
     * @method static _IH_Client_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Client updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Client_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Client_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Client_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Client_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Client_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Client_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Client_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Client_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereKey($id)
     * @method static _IH_Client_QB whereKeyNot($id)
     * @method static _IH_Client_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Client_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Client_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Client_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Client_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Client_QB withCasts(array $casts)
     * @method static _IH_Client_QB withCount($relations)
     * @method static _IH_Client_QB withExists(array|string $relation)
     * @method static _IH_Client_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Client_QB withMax(array|string $relation, string $column)
     * @method static _IH_Client_QB withMin(array|string $relation, string $column)
     * @method static _IH_Client_QB withOnly($relations)
     * @method static _IH_Client_QB withSum(array|string $relation, string $column)
     * @method static _IH_Client_QB without($relations)
     * @method static _IH_Client_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Client_QB withoutGlobalScopes(array $scopes = null)
     * @method static ClientFactory factory(...$parameters)
     */
    class Client extends Model {}
    
    /**
     * @method _IH_PersonalAccessClient_QB newModelQuery()
     * @method _IH_PersonalAccessClient_QB newQuery()
     * @method static _IH_PersonalAccessClient_QB query()
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] all()
     * @method static PersonalAccessClient baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static PersonalAccessClient create(array $attributes = [])
     * @method static _IH_PersonalAccessClient_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_PersonalAccessClient_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_PersonalAccessClient_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static PersonalAccessClient|null find($id, array $columns = ['*'])
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static PersonalAccessClient findOrFail($id, array $columns = ['*'])
     * @method static PersonalAccessClient findOrNew($id, array $columns = ['*'])
     * @method static PersonalAccessClient first(array|string $columns = ['*'])
     * @method static PersonalAccessClient firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static PersonalAccessClient firstOrCreate(array $attributes = [], array $values = [])
     * @method static PersonalAccessClient firstOrFail(array $columns = ['*'])
     * @method static PersonalAccessClient firstOrNew(array $attributes = [], array $values = [])
     * @method static PersonalAccessClient firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static PersonalAccessClient forceCreate(array $attributes)
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static PersonalAccessClient getModel()
     * @method static PersonalAccessClient[] getModels(array|string $columns = ['*'])
     * @method static _IH_PersonalAccessClient_QB getQuery()
     * @method static _IH_PersonalAccessClient_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] hydrate(array $items)
     * @method static _IH_PersonalAccessClient_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_PersonalAccessClient_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_PersonalAccessClient_QB latest(Expression|string $column = null)
     * @method static _IH_PersonalAccessClient_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessClient_QB limit(int $value)
     * @method static PersonalAccessClient make(array $attributes = [])
     * @method static PersonalAccessClient newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_PersonalAccessClient_QB offset(int $value)
     * @method static _IH_PersonalAccessClient_QB oldest(Expression|string $column = null)
     * @method static _IH_PersonalAccessClient_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_PersonalAccessClient_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_PersonalAccessClient_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|PersonalAccessClient[]|_IH_PersonalAccessClient_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_PersonalAccessClient_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessClient_QB select(array|mixed $columns = ['*'])
     * @method static _IH_PersonalAccessClient_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|PersonalAccessClient[]|_IH_PersonalAccessClient_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_PersonalAccessClient_QB skip(int $value)
     * @method static PersonalAccessClient sole(array|string $columns = ['*'])
     * @method static _IH_PersonalAccessClient_QB take(int $value)
     * @method static _IH_PersonalAccessClient_QB tap(callable $callback)
     * @method static _IH_PersonalAccessClient_QB truncate()
     * @method static _IH_PersonalAccessClient_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static PersonalAccessClient updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_PersonalAccessClient_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_PersonalAccessClient_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_PersonalAccessClient_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_PersonalAccessClient_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_PersonalAccessClient_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_PersonalAccessClient_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereKey($id)
     * @method static _IH_PersonalAccessClient_QB whereKeyNot($id)
     * @method static _IH_PersonalAccessClient_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_PersonalAccessClient_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_PersonalAccessClient_QB withAvg(array|string $relation, string $column)
     * @method static _IH_PersonalAccessClient_QB withCasts(array $casts)
     * @method static _IH_PersonalAccessClient_QB withCount($relations)
     * @method static _IH_PersonalAccessClient_QB withExists(array|string $relation)
     * @method static _IH_PersonalAccessClient_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_PersonalAccessClient_QB withMax(array|string $relation, string $column)
     * @method static _IH_PersonalAccessClient_QB withMin(array|string $relation, string $column)
     * @method static _IH_PersonalAccessClient_QB withOnly($relations)
     * @method static _IH_PersonalAccessClient_QB withSum(array|string $relation, string $column)
     * @method static _IH_PersonalAccessClient_QB without($relations)
     * @method static _IH_PersonalAccessClient_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_PersonalAccessClient_QB withoutGlobalScopes(array $scopes = null)
     */
    class PersonalAccessClient extends Model {}
    
    /**
     * @method _IH_RefreshToken_QB newModelQuery()
     * @method _IH_RefreshToken_QB newQuery()
     * @method static _IH_RefreshToken_QB query()
     * @method static _IH_RefreshToken_C|RefreshToken[] all()
     * @method static RefreshToken baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static RefreshToken create(array $attributes = [])
     * @method static _IH_RefreshToken_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_RefreshToken_C|RefreshToken[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_RefreshToken_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_RefreshToken_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static RefreshToken|null find($id, array $columns = ['*'])
     * @method static _IH_RefreshToken_C|RefreshToken[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static RefreshToken findOrFail($id, array $columns = ['*'])
     * @method static RefreshToken findOrNew($id, array $columns = ['*'])
     * @method static RefreshToken first(array|string $columns = ['*'])
     * @method static RefreshToken firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static RefreshToken firstOrCreate(array $attributes = [], array $values = [])
     * @method static RefreshToken firstOrFail(array $columns = ['*'])
     * @method static RefreshToken firstOrNew(array $attributes = [], array $values = [])
     * @method static RefreshToken firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static RefreshToken forceCreate(array $attributes)
     * @method static _IH_RefreshToken_C|RefreshToken[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_RefreshToken_C|RefreshToken[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static RefreshToken getModel()
     * @method static RefreshToken[] getModels(array|string $columns = ['*'])
     * @method static _IH_RefreshToken_QB getQuery()
     * @method static _IH_RefreshToken_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_RefreshToken_C|RefreshToken[] hydrate(array $items)
     * @method static _IH_RefreshToken_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_RefreshToken_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_RefreshToken_QB latest(Expression|string $column = null)
     * @method static _IH_RefreshToken_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_RefreshToken_QB limit(int $value)
     * @method static RefreshToken make(array $attributes = [])
     * @method static RefreshToken newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_RefreshToken_QB offset(int $value)
     * @method static _IH_RefreshToken_QB oldest(Expression|string $column = null)
     * @method static _IH_RefreshToken_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_RefreshToken_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_RefreshToken_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|RefreshToken[]|_IH_RefreshToken_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_RefreshToken_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_RefreshToken_QB select(array|mixed $columns = ['*'])
     * @method static _IH_RefreshToken_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|RefreshToken[]|_IH_RefreshToken_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_RefreshToken_QB skip(int $value)
     * @method static RefreshToken sole(array|string $columns = ['*'])
     * @method static _IH_RefreshToken_QB take(int $value)
     * @method static _IH_RefreshToken_QB tap(callable $callback)
     * @method static _IH_RefreshToken_QB truncate()
     * @method static _IH_RefreshToken_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static RefreshToken updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_RefreshToken_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_RefreshToken_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_RefreshToken_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_RefreshToken_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_RefreshToken_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_RefreshToken_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereKey($id)
     * @method static _IH_RefreshToken_QB whereKeyNot($id)
     * @method static _IH_RefreshToken_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_RefreshToken_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_RefreshToken_QB withAvg(array|string $relation, string $column)
     * @method static _IH_RefreshToken_QB withCasts(array $casts)
     * @method static _IH_RefreshToken_QB withCount($relations)
     * @method static _IH_RefreshToken_QB withExists(array|string $relation)
     * @method static _IH_RefreshToken_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_RefreshToken_QB withMax(array|string $relation, string $column)
     * @method static _IH_RefreshToken_QB withMin(array|string $relation, string $column)
     * @method static _IH_RefreshToken_QB withOnly($relations)
     * @method static _IH_RefreshToken_QB withSum(array|string $relation, string $column)
     * @method static _IH_RefreshToken_QB without($relations)
     * @method static _IH_RefreshToken_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_RefreshToken_QB withoutGlobalScopes(array $scopes = null)
     */
    class RefreshToken extends Model {}
    
    /**
     * @property User $user
     * @method BelongsTo|_IH_User_QB user()
     * @method _IH_Token_QB newModelQuery()
     * @method _IH_Token_QB newQuery()
     * @method static _IH_Token_QB query()
     * @method static _IH_Token_C|Token[] all()
     * @method static Token baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Token create(array $attributes = [])
     * @method static _IH_Token_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Token_C|Token[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Token_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Token_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Token|null find($id, array $columns = ['*'])
     * @method static _IH_Token_C|Token[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Token findOrFail($id, array $columns = ['*'])
     * @method static Token findOrNew($id, array $columns = ['*'])
     * @method static Token first(array|string $columns = ['*'])
     * @method static Token firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Token firstOrCreate(array $attributes = [], array $values = [])
     * @method static Token firstOrFail(array $columns = ['*'])
     * @method static Token firstOrNew(array $attributes = [], array $values = [])
     * @method static Token firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Token forceCreate(array $attributes)
     * @method static _IH_Token_C|Token[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Token_C|Token[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Token getModel()
     * @method static Token[] getModels(array|string $columns = ['*'])
     * @method static _IH_Token_QB getQuery()
     * @method static _IH_Token_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Token_C|Token[] hydrate(array $items)
     * @method static _IH_Token_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Token_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Token_QB latest(Expression|string $column = null)
     * @method static _IH_Token_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Token_QB limit(int $value)
     * @method static Token make(array $attributes = [])
     * @method static Token newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Token_QB offset(int $value)
     * @method static _IH_Token_QB oldest(Expression|string $column = null)
     * @method static _IH_Token_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Token_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Token_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Token[]|_IH_Token_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Token_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Token_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Token_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Token[]|_IH_Token_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Token_QB skip(int $value)
     * @method static Token sole(array|string $columns = ['*'])
     * @method static _IH_Token_QB take(int $value)
     * @method static _IH_Token_QB tap(callable $callback)
     * @method static _IH_Token_QB truncate()
     * @method static _IH_Token_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Token updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Token_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Token_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Token_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Token_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Token_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Token_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Token_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Token_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereKey($id)
     * @method static _IH_Token_QB whereKeyNot($id)
     * @method static _IH_Token_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Token_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Token_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Token_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Token_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Token_QB withCasts(array $casts)
     * @method static _IH_Token_QB withCount($relations)
     * @method static _IH_Token_QB withExists(array|string $relation)
     * @method static _IH_Token_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Token_QB withMax(array|string $relation, string $column)
     * @method static _IH_Token_QB withMin(array|string $relation, string $column)
     * @method static _IH_Token_QB withOnly($relations)
     * @method static _IH_Token_QB withSum(array|string $relation, string $column)
     * @method static _IH_Token_QB without($relations)
     * @method static _IH_Token_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Token_QB withoutGlobalScopes(array $scopes = null)
     */
    class Token extends Model {}
}

namespace Laravel\Sanctum {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Support\Carbon;
    use LaravelIdea\Helper\Laravel\Sanctum\_IH_PersonalAccessToken_C;
    use LaravelIdea\Helper\Laravel\Sanctum\_IH_PersonalAccessToken_QB;
    
    /**
     * @property int $id
     * @property int $tokenable_id
     * @property string $tokenable_type
     * @property string $name
     * @property string $token
     * @property mixed|null $abilities
     * @property Carbon|null $last_used_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property Model $tokenable
     * @method MorphTo tokenable()
     * @method _IH_PersonalAccessToken_QB newModelQuery()
     * @method _IH_PersonalAccessToken_QB newQuery()
     * @method static _IH_PersonalAccessToken_QB query()
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] all()
     * @method static _IH_PersonalAccessToken_QB whereId($value)
     * @method static _IH_PersonalAccessToken_QB whereTokenableId($value)
     * @method static _IH_PersonalAccessToken_QB whereTokenableType($value)
     * @method static _IH_PersonalAccessToken_QB whereName($value)
     * @method static _IH_PersonalAccessToken_QB whereToken($value)
     * @method static _IH_PersonalAccessToken_QB whereAbilities($value)
     * @method static _IH_PersonalAccessToken_QB whereLastUsedAt($value)
     * @method static _IH_PersonalAccessToken_QB whereCreatedAt($value)
     * @method static _IH_PersonalAccessToken_QB whereUpdatedAt($value)
     * @method static PersonalAccessToken baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static PersonalAccessToken create(array $attributes = [])
     * @method static _IH_PersonalAccessToken_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_PersonalAccessToken_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_PersonalAccessToken_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static PersonalAccessToken|null find($id, array $columns = ['*'])
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static PersonalAccessToken findOrFail($id, array $columns = ['*'])
     * @method static PersonalAccessToken findOrNew($id, array $columns = ['*'])
     * @method static PersonalAccessToken first(array|string $columns = ['*'])
     * @method static PersonalAccessToken firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static PersonalAccessToken firstOrCreate(array $attributes = [], array $values = [])
     * @method static PersonalAccessToken firstOrFail(array $columns = ['*'])
     * @method static PersonalAccessToken firstOrNew(array $attributes = [], array $values = [])
     * @method static PersonalAccessToken firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static PersonalAccessToken forceCreate(array $attributes)
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static PersonalAccessToken getModel()
     * @method static PersonalAccessToken[] getModels(array|string $columns = ['*'])
     * @method static _IH_PersonalAccessToken_QB getQuery()
     * @method static _IH_PersonalAccessToken_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] hydrate(array $items)
     * @method static _IH_PersonalAccessToken_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_PersonalAccessToken_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_PersonalAccessToken_QB latest(Expression|string $column = null)
     * @method static _IH_PersonalAccessToken_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessToken_QB limit(int $value)
     * @method static PersonalAccessToken make(array $attributes = [])
     * @method static PersonalAccessToken newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_PersonalAccessToken_QB offset(int $value)
     * @method static _IH_PersonalAccessToken_QB oldest(Expression|string $column = null)
     * @method static _IH_PersonalAccessToken_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_PersonalAccessToken_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_PersonalAccessToken_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|PersonalAccessToken[]|_IH_PersonalAccessToken_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_PersonalAccessToken_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessToken_QB select(array|mixed $columns = ['*'])
     * @method static _IH_PersonalAccessToken_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|PersonalAccessToken[]|_IH_PersonalAccessToken_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_PersonalAccessToken_QB skip(int $value)
     * @method static PersonalAccessToken sole(array|string $columns = ['*'])
     * @method static _IH_PersonalAccessToken_QB take(int $value)
     * @method static _IH_PersonalAccessToken_QB tap(callable $callback)
     * @method static _IH_PersonalAccessToken_QB truncate()
     * @method static _IH_PersonalAccessToken_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static PersonalAccessToken updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_PersonalAccessToken_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_PersonalAccessToken_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_PersonalAccessToken_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_PersonalAccessToken_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_PersonalAccessToken_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_PersonalAccessToken_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereKey($id)
     * @method static _IH_PersonalAccessToken_QB whereKeyNot($id)
     * @method static _IH_PersonalAccessToken_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_PersonalAccessToken_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_PersonalAccessToken_QB withAvg(array|string $relation, string $column)
     * @method static _IH_PersonalAccessToken_QB withCasts(array $casts)
     * @method static _IH_PersonalAccessToken_QB withCount($relations)
     * @method static _IH_PersonalAccessToken_QB withExists(array|string $relation)
     * @method static _IH_PersonalAccessToken_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_PersonalAccessToken_QB withMax(array|string $relation, string $column)
     * @method static _IH_PersonalAccessToken_QB withMin(array|string $relation, string $column)
     * @method static _IH_PersonalAccessToken_QB withOnly($relations)
     * @method static _IH_PersonalAccessToken_QB withSum(array|string $relation, string $column)
     * @method static _IH_PersonalAccessToken_QB without($relations)
     * @method static _IH_PersonalAccessToken_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_PersonalAccessToken_QB withoutGlobalScopes(array $scopes = null)
     */
    class PersonalAccessToken extends Model {}
}

namespace Spatie\Permission\Models {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\BelongsToMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Support\Carbon;
    use Illuminate\Support\Collection;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Permission_C;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Permission_QB;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Role_C;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Role_QB;
    use Spatie\Permission\Contracts\Permission as Permission1;
    use Spatie\Permission\Contracts\Role as Role1;
    
    /**
     * @property int $id
     * @property string $name
     * @property string $guard_name
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property _IH_Permission_C|Permission[] $permissions
     * @property-read int $permissions_count
     * @method MorphToMany|_IH_Permission_QB permissions()
     * @property _IH_Role_C|Role[] $roles
     * @property-read int $roles_count
     * @method BelongsToMany|_IH_Role_QB roles()
     * @method _IH_Permission_QB newModelQuery()
     * @method _IH_Permission_QB newQuery()
     * @method static _IH_Permission_QB query()
     * @method static _IH_Permission_C|Permission[] all()
     * @method static _IH_Permission_QB whereId($value)
     * @method static _IH_Permission_QB whereName($value)
     * @method static _IH_Permission_QB whereGuardName($value)
     * @method static _IH_Permission_QB whereCreatedAt($value)
     * @method static _IH_Permission_QB whereUpdatedAt($value)
     * @method static Permission baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Permission create(array $attributes = [])
     * @method static _IH_Permission_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Permission_C|Permission[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Permission_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Permission_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Permission|null find($id, array $columns = ['*'])
     * @method static _IH_Permission_C|Permission[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Permission findOrFail($id, array $columns = ['*'])
     * @method static Permission findOrNew($id, array $columns = ['*'])
     * @method static Permission first(array|string $columns = ['*'])
     * @method static Permission firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Permission firstOrCreate(array $attributes = [], array $values = [])
     * @method static Permission firstOrFail(array $columns = ['*'])
     * @method static Permission firstOrNew(array $attributes = [], array $values = [])
     * @method static Permission firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Permission forceCreate(array $attributes)
     * @method static _IH_Permission_C|Permission[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Permission_C|Permission[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Permission getModel()
     * @method static Permission[] getModels(array|string $columns = ['*'])
     * @method static _IH_Permission_QB getQuery()
     * @method static _IH_Permission_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Permission_C|Permission[] hydrate(array $items)
     * @method static _IH_Permission_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Permission_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Permission_QB latest(Expression|string $column = null)
     * @method static _IH_Permission_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Permission_QB limit(int $value)
     * @method static Permission make(array $attributes = [])
     * @method static Permission newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Permission_QB offset(int $value)
     * @method static _IH_Permission_QB oldest(Expression|string $column = null)
     * @method static _IH_Permission_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Permission_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Permission_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Permission[]|_IH_Permission_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Permission_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Permission_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Permission_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Permission[]|_IH_Permission_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Permission_QB skip(int $value)
     * @method static Permission sole(array|string $columns = ['*'])
     * @method static _IH_Permission_QB take(int $value)
     * @method static _IH_Permission_QB tap(callable $callback)
     * @method static _IH_Permission_QB truncate()
     * @method static _IH_Permission_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Permission updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Permission_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Permission_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Permission_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Permission_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Permission_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Permission_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Permission_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Permission_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereKey($id)
     * @method static _IH_Permission_QB whereKeyNot($id)
     * @method static _IH_Permission_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Permission_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Permission_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Permission_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Permission_QB withCasts(array $casts)
     * @method static _IH_Permission_QB withCount($relations)
     * @method static _IH_Permission_QB withExists(array|string $relation)
     * @method static _IH_Permission_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Permission_QB withMax(array|string $relation, string $column)
     * @method static _IH_Permission_QB withMin(array|string $relation, string $column)
     * @method static _IH_Permission_QB withOnly($relations)
     * @method static _IH_Permission_QB withSum(array|string $relation, string $column)
     * @method static _IH_Permission_QB without($relations)
     * @method static _IH_Permission_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Permission_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Permission_QB permission(array|Collection|Permission1|string $permissions)
     * @method static _IH_Permission_QB role(array|Collection|Role1|string $roles, string $guard = null)
     */
    class Permission extends Model {}
    
    /**
     * @property int $id
     * @property string $name
     * @property string $guard_name
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property _IH_Permission_C|Permission[] $permissions
     * @property-read int $permissions_count
     * @method BelongsToMany|_IH_Permission_QB permissions()
     * @method _IH_Role_QB newModelQuery()
     * @method _IH_Role_QB newQuery()
     * @method static _IH_Role_QB query()
     * @method static _IH_Role_C|Role[] all()
     * @method static _IH_Role_QB whereId($value)
     * @method static _IH_Role_QB whereName($value)
     * @method static _IH_Role_QB whereGuardName($value)
     * @method static _IH_Role_QB whereCreatedAt($value)
     * @method static _IH_Role_QB whereUpdatedAt($value)
     * @method static Role baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Role create(array $attributes = [])
     * @method static _IH_Role_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Role_C|Role[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Role_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Role_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Role|null find($id, array $columns = ['*'])
     * @method static _IH_Role_C|Role[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Role findOrFail($id, array $columns = ['*'])
     * @method static Role findOrNew($id, array $columns = ['*'])
     * @method static Role first(array|string $columns = ['*'])
     * @method static Role firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Role firstOrCreate(array $attributes = [], array $values = [])
     * @method static Role firstOrFail(array $columns = ['*'])
     * @method static Role firstOrNew(array $attributes = [], array $values = [])
     * @method static Role firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Role forceCreate(array $attributes)
     * @method static _IH_Role_C|Role[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Role_C|Role[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Role getModel()
     * @method static Role[] getModels(array|string $columns = ['*'])
     * @method static _IH_Role_QB getQuery()
     * @method static _IH_Role_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Role_C|Role[] hydrate(array $items)
     * @method static _IH_Role_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Role_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Role_QB latest(Expression|string $column = null)
     * @method static _IH_Role_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Role_QB limit(int $value)
     * @method static Role make(array $attributes = [])
     * @method static Role newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Role_QB offset(int $value)
     * @method static _IH_Role_QB oldest(Expression|string $column = null)
     * @method static _IH_Role_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Role_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Role_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Role[]|_IH_Role_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Role_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Role_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Role_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Role[]|_IH_Role_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Role_QB skip(int $value)
     * @method static Role sole(array|string $columns = ['*'])
     * @method static _IH_Role_QB take(int $value)
     * @method static _IH_Role_QB tap(callable $callback)
     * @method static _IH_Role_QB truncate()
     * @method static _IH_Role_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Role updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Role_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Role_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Role_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Role_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Role_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Role_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Role_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Role_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereKey($id)
     * @method static _IH_Role_QB whereKeyNot($id)
     * @method static _IH_Role_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Role_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Role_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Role_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Role_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Role_QB withCasts(array $casts)
     * @method static _IH_Role_QB withCount($relations)
     * @method static _IH_Role_QB withExists(array|string $relation)
     * @method static _IH_Role_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Role_QB withMax(array|string $relation, string $column)
     * @method static _IH_Role_QB withMin(array|string $relation, string $column)
     * @method static _IH_Role_QB withOnly($relations)
     * @method static _IH_Role_QB withSum(array|string $relation, string $column)
     * @method static _IH_Role_QB without($relations)
     * @method static _IH_Role_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Role_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Role_QB permission(array|Collection|Permission1|string $permissions)
     */
    class Role extends Model {}
}