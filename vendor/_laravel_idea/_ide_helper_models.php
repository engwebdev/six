<?php
/** @noinspection PhpUndefinedClassInspection */
/** @noinspection PhpFullyQualifiedNameUsageInspection */
/** @noinspection PhpUnusedAliasInspection */

namespace App\Models {

    use Database\Factories\CategoryFactory;
    use Database\Factories\ShopFactory;
    use Database\Factories\TagFactory;
    use Database\Factories\TeamFactory;
    use Database\Factories\UserFactory;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use Illuminate\Database\Eloquent\Relations\BelongsToMany;
    use Illuminate\Database\Eloquent\Relations\HasMany;
    use Illuminate\Database\Eloquent\Relations\HasOneThrough;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Notifications\DatabaseNotification;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Support\Carbon;
    use Illuminate\Support\Collection;
    use LaravelIdea\Helper\App\Models\_IH_AttributeValue_C;
    use LaravelIdea\Helper\App\Models\_IH_AttributeValue_QB;
    use LaravelIdea\Helper\App\Models\_IH_Attribute_C;
    use LaravelIdea\Helper\App\Models\_IH_Attribute_QB;
    use LaravelIdea\Helper\App\Models\_IH_Category_C;
    use LaravelIdea\Helper\App\Models\_IH_Category_QB;
    use LaravelIdea\Helper\App\Models\_IH_ConfirmComment_C;
    use LaravelIdea\Helper\App\Models\_IH_ConfirmComment_QB;
    use LaravelIdea\Helper\App\Models\_IH_CustomProduct_C;
    use LaravelIdea\Helper\App\Models\_IH_CustomProduct_QB;
    use LaravelIdea\Helper\App\Models\_IH_CustomService_C;
    use LaravelIdea\Helper\App\Models\_IH_customService_C;
    use LaravelIdea\Helper\App\Models\_IH_CustomService_QB;
    use LaravelIdea\Helper\App\Models\_IH_customService_QB;
    use LaravelIdea\Helper\App\Models\_IH_Detail_C;
    use LaravelIdea\Helper\App\Models\_IH_Detail_QB;
    use LaravelIdea\Helper\App\Models\_IH_Membership_C;
    use LaravelIdea\Helper\App\Models\_IH_Membership_QB;
    use LaravelIdea\Helper\App\Models\_IH_NormalProduct_C;
    use LaravelIdea\Helper\App\Models\_IH_NormalProduct_QB;
    use LaravelIdea\Helper\App\Models\_IH_NormalService_C;
    use LaravelIdea\Helper\App\Models\_IH_normalService_C;
    use LaravelIdea\Helper\App\Models\_IH_NormalService_QB;
    use LaravelIdea\Helper\App\Models\_IH_normalService_QB;
    use LaravelIdea\Helper\App\Models\_IH_ProductCategory_C;
    use LaravelIdea\Helper\App\Models\_IH_ProductCategory_QB;
    use LaravelIdea\Helper\App\Models\_IH_ProductCustomerComments_C;
    use LaravelIdea\Helper\App\Models\_IH_ProductCustomerComments_QB;
    use LaravelIdea\Helper\App\Models\_IH_ProductImage_C;
    use LaravelIdea\Helper\App\Models\_IH_ProductImage_QB;
    use LaravelIdea\Helper\App\Models\_IH_productPriceHistory_C;
    use LaravelIdea\Helper\App\Models\_IH_productPriceHistory_QB;
    use LaravelIdea\Helper\App\Models\_IH_ProductTag_C;
    use LaravelIdea\Helper\App\Models\_IH_ProductTag_QB;
    use LaravelIdea\Helper\App\Models\_IH_RolesShopsUsers_C;
    use LaravelIdea\Helper\App\Models\_IH_RolesShopsUsers_QB;
    use LaravelIdea\Helper\App\Models\_IH_Shop_C;
    use LaravelIdea\Helper\App\Models\_IH_shop_C;
    use LaravelIdea\Helper\App\Models\_IH_Shop_QB;
    use LaravelIdea\Helper\App\Models\_IH_shop_QB;
    use LaravelIdea\Helper\App\Models\_IH_tag_C;
    use LaravelIdea\Helper\App\Models\_IH_Tag_C;
    use LaravelIdea\Helper\App\Models\_IH_tag_QB;
    use LaravelIdea\Helper\App\Models\_IH_Tag_QB;
    use LaravelIdea\Helper\App\Models\_IH_Tasks_C;
    use LaravelIdea\Helper\App\Models\_IH_Tasks_QB;
    use LaravelIdea\Helper\App\Models\_IH_TeamInvitation_C;
    use LaravelIdea\Helper\App\Models\_IH_TeamInvitation_QB;
    use LaravelIdea\Helper\App\Models\_IH_Team_C;
    use LaravelIdea\Helper\App\Models\_IH_Team_QB;
    use LaravelIdea\Helper\App\Models\_IH_User_C;
    use LaravelIdea\Helper\App\Models\_IH_User_QB;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_C;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_QB;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Permission_C;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Permission_QB;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Role_C;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Role_QB;
    use Spatie\Permission\Contracts\Permission as Permission1;
    use Spatie\Permission\Contracts\Role as Role1;
    use Spatie\Permission\Models\Permission;
    use Spatie\Permission\Models\Role;
    
    /**
     * @property int $id
     * @property string|null $attribute_name
     * @property string|null $attribute_additional_type
     * @property string|null $attribute_additional_user
     * @property bool $attribute_publish_status
     * @property bool $attribute_status_accept
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @method _IH_Attribute_QB newModelQuery()
     * @method _IH_Attribute_QB newQuery()
     * @method static _IH_Attribute_QB query()
     * @method static _IH_Attribute_C|Attribute[] all()
     * @method static _IH_Attribute_QB whereId($value)
     * @method static _IH_Attribute_QB whereAttributeName($value)
     * @method static _IH_Attribute_QB whereAttributeAdditionalType($value)
     * @method static _IH_Attribute_QB whereAttributeAdditionalUser($value)
     * @method static _IH_Attribute_QB whereAttributePublishStatus($value)
     * @method static _IH_Attribute_QB whereAttributeStatusAccept($value)
     * @method static _IH_Attribute_QB whereDeletedAt($value)
     * @method static _IH_Attribute_QB whereCreatedAt($value)
     * @method static _IH_Attribute_QB whereUpdatedAt($value)
     * @method static Attribute baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Attribute create(array $attributes = [])
     * @method static _IH_Attribute_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Attribute_C|Attribute[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Attribute_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Attribute_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Attribute|null find($id, array $columns = ['*'])
     * @method static _IH_Attribute_C|Attribute[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Attribute findOrFail($id, array $columns = ['*'])
     * @method static Attribute findOrNew($id, array $columns = ['*'])
     * @method static Attribute first(array|string $columns = ['*'])
     * @method static Attribute firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Attribute firstOrCreate(array $attributes = [], array $values = [])
     * @method static Attribute firstOrFail(array $columns = ['*'])
     * @method static Attribute firstOrNew(array $attributes = [], array $values = [])
     * @method static Attribute firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Attribute forceCreate(array $attributes)
     * @method static _IH_Attribute_C|Attribute[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Attribute_C|Attribute[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Attribute getModel()
     * @method static Attribute[] getModels(array|string $columns = ['*'])
     * @method static _IH_Attribute_QB getQuery()
     * @method static _IH_Attribute_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Attribute_C|Attribute[] hydrate(array $items)
     * @method static _IH_Attribute_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Attribute_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Attribute_QB latest(Expression|string $column = null)
     * @method static _IH_Attribute_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Attribute_QB limit(int $value)
     * @method static Attribute make(array $attributes = [])
     * @method static Attribute newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Attribute_QB offset(int $value)
     * @method static _IH_Attribute_QB oldest(Expression|string $column = null)
     * @method static _IH_Attribute_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Attribute_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Attribute_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Attribute[]|_IH_Attribute_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Attribute_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Attribute_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Attribute_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Attribute[]|_IH_Attribute_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Attribute_QB skip(int $value)
     * @method static Attribute sole(array|string $columns = ['*'])
     * @method static _IH_Attribute_QB take(int $value)
     * @method static _IH_Attribute_QB tap(callable $callback)
     * @method static _IH_Attribute_QB truncate()
     * @method static _IH_Attribute_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Attribute updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Attribute_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Attribute_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Attribute_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Attribute_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Attribute_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Attribute_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Attribute_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Attribute_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Attribute_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Attribute_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Attribute_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Attribute_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Attribute_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereKey($id)
     * @method static _IH_Attribute_QB whereKeyNot($id)
     * @method static _IH_Attribute_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Attribute_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Attribute_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Attribute_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Attribute_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Attribute_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Attribute_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Attribute_QB withCasts(array $casts)
     * @method static _IH_Attribute_QB withCount($relations)
     * @method static _IH_Attribute_QB withExists(array|string $relation)
     * @method static _IH_Attribute_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Attribute_QB withMax(array|string $relation, string $column)
     * @method static _IH_Attribute_QB withMin(array|string $relation, string $column)
     * @method static _IH_Attribute_QB withOnly($relations)
     * @method static _IH_Attribute_QB withSum(array|string $relation, string $column)
     * @method static _IH_Attribute_QB without($relations)
     * @method static _IH_Attribute_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Attribute_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Attribute_QB withTrashed()
     * @method static _IH_Attribute_QB onlyTrashed()
     * @method static _IH_Attribute_QB withoutTrashed()
     */
    class Attribute extends Model {}
    
    /**
     * @property int $id
     * @property string|null $attribute_value_name
     * @property string|null $attribute_value_additional_type
     * @property string|null $attribute_value_additional_user
     * @property bool $attribute_value_publish_status
     * @property bool $attribute_value_status_accept
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @method _IH_AttributeValue_QB newModelQuery()
     * @method _IH_AttributeValue_QB newQuery()
     * @method static _IH_AttributeValue_QB query()
     * @method static _IH_AttributeValue_C|AttributeValue[] all()
     * @method static _IH_AttributeValue_QB whereId($value)
     * @method static _IH_AttributeValue_QB whereAttributeValueName($value)
     * @method static _IH_AttributeValue_QB whereAttributeValueAdditionalType($value)
     * @method static _IH_AttributeValue_QB whereAttributeValueAdditionalUser($value)
     * @method static _IH_AttributeValue_QB whereAttributeValuePublishStatus($value)
     * @method static _IH_AttributeValue_QB whereAttributeValueStatusAccept($value)
     * @method static _IH_AttributeValue_QB whereDeletedAt($value)
     * @method static _IH_AttributeValue_QB whereCreatedAt($value)
     * @method static _IH_AttributeValue_QB whereUpdatedAt($value)
     * @method static AttributeValue baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static AttributeValue create(array $attributes = [])
     * @method static _IH_AttributeValue_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_AttributeValue_C|AttributeValue[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_AttributeValue_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_AttributeValue_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static AttributeValue|null find($id, array $columns = ['*'])
     * @method static _IH_AttributeValue_C|AttributeValue[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static AttributeValue findOrFail($id, array $columns = ['*'])
     * @method static AttributeValue findOrNew($id, array $columns = ['*'])
     * @method static AttributeValue first(array|string $columns = ['*'])
     * @method static AttributeValue firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static AttributeValue firstOrCreate(array $attributes = [], array $values = [])
     * @method static AttributeValue firstOrFail(array $columns = ['*'])
     * @method static AttributeValue firstOrNew(array $attributes = [], array $values = [])
     * @method static AttributeValue firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static AttributeValue forceCreate(array $attributes)
     * @method static _IH_AttributeValue_C|AttributeValue[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_AttributeValue_C|AttributeValue[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static AttributeValue getModel()
     * @method static AttributeValue[] getModels(array|string $columns = ['*'])
     * @method static _IH_AttributeValue_QB getQuery()
     * @method static _IH_AttributeValue_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_AttributeValue_C|AttributeValue[] hydrate(array $items)
     * @method static _IH_AttributeValue_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_AttributeValue_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_AttributeValue_QB latest(Expression|string $column = null)
     * @method static _IH_AttributeValue_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_AttributeValue_QB limit(int $value)
     * @method static AttributeValue make(array $attributes = [])
     * @method static AttributeValue newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_AttributeValue_QB offset(int $value)
     * @method static _IH_AttributeValue_QB oldest(Expression|string $column = null)
     * @method static _IH_AttributeValue_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_AttributeValue_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_AttributeValue_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|AttributeValue[]|_IH_AttributeValue_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_AttributeValue_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_AttributeValue_QB select(array|mixed $columns = ['*'])
     * @method static _IH_AttributeValue_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|AttributeValue[]|_IH_AttributeValue_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_AttributeValue_QB skip(int $value)
     * @method static AttributeValue sole(array|string $columns = ['*'])
     * @method static _IH_AttributeValue_QB take(int $value)
     * @method static _IH_AttributeValue_QB tap(callable $callback)
     * @method static _IH_AttributeValue_QB truncate()
     * @method static _IH_AttributeValue_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static AttributeValue updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_AttributeValue_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_AttributeValue_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AttributeValue_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AttributeValue_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_AttributeValue_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_AttributeValue_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_AttributeValue_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_AttributeValue_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_AttributeValue_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AttributeValue_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AttributeValue_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_AttributeValue_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereKey($id)
     * @method static _IH_AttributeValue_QB whereKeyNot($id)
     * @method static _IH_AttributeValue_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_AttributeValue_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AttributeValue_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_AttributeValue_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_AttributeValue_QB withAvg(array|string $relation, string $column)
     * @method static _IH_AttributeValue_QB withCasts(array $casts)
     * @method static _IH_AttributeValue_QB withCount($relations)
     * @method static _IH_AttributeValue_QB withExists(array|string $relation)
     * @method static _IH_AttributeValue_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_AttributeValue_QB withMax(array|string $relation, string $column)
     * @method static _IH_AttributeValue_QB withMin(array|string $relation, string $column)
     * @method static _IH_AttributeValue_QB withOnly($relations)
     * @method static _IH_AttributeValue_QB withSum(array|string $relation, string $column)
     * @method static _IH_AttributeValue_QB without($relations)
     * @method static _IH_AttributeValue_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_AttributeValue_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_AttributeValue_QB withTrashed()
     * @method static _IH_AttributeValue_QB onlyTrashed()
     * @method static _IH_AttributeValue_QB withoutTrashed()
     */
    class AttributeValue extends Model {}
    
    /**
     * @property int $id
     * @property string|null $category_name
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property string|null $category_image_url
     * @property int|null $categoryable_id
     * @property string|null $categoryable_type
     * @property int|null $category_additional_user_id
     * @property string|null $category_additional_user_type
     * @property bool|null $category_accept_status
     * @property bool|null $category_publish_status
     * @property string|null $category_show_status
     * @property _IH_Shop_C|Shop[] $shops
     * @property-read int $shops_count
     * @method HasMany|_IH_Shop_QB shops()
     * @method _IH_Category_QB newModelQuery()
     * @method _IH_Category_QB newQuery()
     * @method static _IH_Category_QB query()
     * @method static _IH_Category_C|Category[] all()
     * @method static _IH_Category_QB whereId($value)
     * @method static _IH_Category_QB whereCategoryName($value)
     * @method static _IH_Category_QB whereDeletedAt($value)
     * @method static _IH_Category_QB whereCreatedAt($value)
     * @method static _IH_Category_QB whereUpdatedAt($value)
     * @method static _IH_Category_QB whereCategoryImageUrl($value)
     * @method static _IH_Category_QB whereCategoryableId($value)
     * @method static _IH_Category_QB whereCategoryableType($value)
     * @method static _IH_Category_QB whereCategoryAdditionalUserId($value)
     * @method static _IH_Category_QB whereCategoryAdditionalUserType($value)
     * @method static _IH_Category_QB whereCategoryAcceptStatus($value)
     * @method static _IH_Category_QB whereCategoryPublishStatus($value)
     * @method static _IH_Category_QB whereCategoryShowStatus($value)
     * @method static Category baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Category create(array $attributes = [])
     * @method static _IH_Category_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Category_C|Category[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Category_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Category_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Category|null find($id, array $columns = ['*'])
     * @method static _IH_Category_C|Category[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Category findOrFail($id, array $columns = ['*'])
     * @method static Category findOrNew($id, array $columns = ['*'])
     * @method static Category first(array|string $columns = ['*'])
     * @method static Category firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Category firstOrCreate(array $attributes = [], array $values = [])
     * @method static Category firstOrFail(array $columns = ['*'])
     * @method static Category firstOrNew(array $attributes = [], array $values = [])
     * @method static Category firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Category forceCreate(array $attributes)
     * @method static _IH_Category_C|Category[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Category_C|Category[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Category getModel()
     * @method static Category[] getModels(array|string $columns = ['*'])
     * @method static _IH_Category_QB getQuery()
     * @method static _IH_Category_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Category_C|Category[] hydrate(array $items)
     * @method static _IH_Category_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Category_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Category_QB latest(Expression|string $column = null)
     * @method static _IH_Category_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Category_QB limit(int $value)
     * @method static Category make(array $attributes = [])
     * @method static Category newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Category_QB offset(int $value)
     * @method static _IH_Category_QB oldest(Expression|string $column = null)
     * @method static _IH_Category_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Category_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Category_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Category[]|_IH_Category_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Category_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Category_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Category_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Category[]|_IH_Category_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Category_QB skip(int $value)
     * @method static Category sole(array|string $columns = ['*'])
     * @method static _IH_Category_QB take(int $value)
     * @method static _IH_Category_QB tap(callable $callback)
     * @method static _IH_Category_QB truncate()
     * @method static _IH_Category_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Category updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Category_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Category_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Category_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Category_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Category_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Category_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Category_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Category_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereKey($id)
     * @method static _IH_Category_QB whereKeyNot($id)
     * @method static _IH_Category_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Category_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Category_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Category_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Category_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Category_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Category_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Category_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Category_QB withCasts(array $casts)
     * @method static _IH_Category_QB withCount($relations)
     * @method static _IH_Category_QB withExists(array|string $relation)
     * @method static _IH_Category_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Category_QB withMax(array|string $relation, string $column)
     * @method static _IH_Category_QB withMin(array|string $relation, string $column)
     * @method static _IH_Category_QB withOnly($relations)
     * @method static _IH_Category_QB withSum(array|string $relation, string $column)
     * @method static _IH_Category_QB without($relations)
     * @method static _IH_Category_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Category_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Category_QB withTrashed()
     * @method static _IH_Category_QB onlyTrashed()
     * @method static _IH_Category_QB withoutTrashed()
     * @method static CategoryFactory factory(...$parameters)
     */
    class Category extends Model {}
    
    /**
     * @property Model $confirm_commentable
     * @method MorphTo confirm_commentable()
     * @method _IH_ConfirmComment_QB newModelQuery()
     * @method _IH_ConfirmComment_QB newQuery()
     * @method static _IH_ConfirmComment_QB query()
     * @method static _IH_ConfirmComment_C|ConfirmComment[] all()
     * @method static ConfirmComment baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static ConfirmComment create(array $attributes = [])
     * @method static _IH_ConfirmComment_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_ConfirmComment_C|ConfirmComment[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_ConfirmComment_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_ConfirmComment_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static ConfirmComment|null find($id, array $columns = ['*'])
     * @method static _IH_ConfirmComment_C|ConfirmComment[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static ConfirmComment findOrFail($id, array $columns = ['*'])
     * @method static ConfirmComment findOrNew($id, array $columns = ['*'])
     * @method static ConfirmComment first(array|string $columns = ['*'])
     * @method static ConfirmComment firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static ConfirmComment firstOrCreate(array $attributes = [], array $values = [])
     * @method static ConfirmComment firstOrFail(array $columns = ['*'])
     * @method static ConfirmComment firstOrNew(array $attributes = [], array $values = [])
     * @method static ConfirmComment firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static ConfirmComment forceCreate(array $attributes)
     * @method static _IH_ConfirmComment_C|ConfirmComment[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_ConfirmComment_C|ConfirmComment[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static ConfirmComment getModel()
     * @method static ConfirmComment[] getModels(array|string $columns = ['*'])
     * @method static _IH_ConfirmComment_QB getQuery()
     * @method static _IH_ConfirmComment_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_ConfirmComment_C|ConfirmComment[] hydrate(array $items)
     * @method static _IH_ConfirmComment_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_ConfirmComment_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_ConfirmComment_QB latest(Expression|string $column = null)
     * @method static _IH_ConfirmComment_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ConfirmComment_QB limit(int $value)
     * @method static ConfirmComment make(array $attributes = [])
     * @method static ConfirmComment newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_ConfirmComment_QB offset(int $value)
     * @method static _IH_ConfirmComment_QB oldest(Expression|string $column = null)
     * @method static _IH_ConfirmComment_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_ConfirmComment_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_ConfirmComment_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|ConfirmComment[]|_IH_ConfirmComment_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ConfirmComment_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ConfirmComment_QB select(array|mixed $columns = ['*'])
     * @method static _IH_ConfirmComment_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|ConfirmComment[]|_IH_ConfirmComment_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ConfirmComment_QB skip(int $value)
     * @method static ConfirmComment sole(array|string $columns = ['*'])
     * @method static _IH_ConfirmComment_QB take(int $value)
     * @method static _IH_ConfirmComment_QB tap(callable $callback)
     * @method static _IH_ConfirmComment_QB truncate()
     * @method static _IH_ConfirmComment_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static ConfirmComment updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_ConfirmComment_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_ConfirmComment_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ConfirmComment_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ConfirmComment_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_ConfirmComment_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_ConfirmComment_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_ConfirmComment_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ConfirmComment_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ConfirmComment_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ConfirmComment_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ConfirmComment_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_ConfirmComment_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereKey($id)
     * @method static _IH_ConfirmComment_QB whereKeyNot($id)
     * @method static _IH_ConfirmComment_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_ConfirmComment_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ConfirmComment_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_ConfirmComment_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_ConfirmComment_QB withAvg(array|string $relation, string $column)
     * @method static _IH_ConfirmComment_QB withCasts(array $casts)
     * @method static _IH_ConfirmComment_QB withCount($relations)
     * @method static _IH_ConfirmComment_QB withExists(array|string $relation)
     * @method static _IH_ConfirmComment_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_ConfirmComment_QB withMax(array|string $relation, string $column)
     * @method static _IH_ConfirmComment_QB withMin(array|string $relation, string $column)
     * @method static _IH_ConfirmComment_QB withOnly($relations)
     * @method static _IH_ConfirmComment_QB withSum(array|string $relation, string $column)
     * @method static _IH_ConfirmComment_QB without($relations)
     * @method static _IH_ConfirmComment_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_ConfirmComment_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_ConfirmComment_QB withTrashed()
     * @method static _IH_ConfirmComment_QB onlyTrashed()
     * @method static _IH_ConfirmComment_QB withoutTrashed()
     */
    class ConfirmComment extends Model {}
    
    /**
     * @property int $id
     * @property string|null $custom_product_name
     * @property string|null $custom_product_description
     * @property string|null $custom_product_info
     * @property string|null $custom_product_note
     * @property bool|null $custom_product_status_accept
     * @property int|null $custom_product_status_confirm_user_id
     * @property string|null $custom_product_status_confirm_user_comment
     * @property bool|null $custom_product_status_publish
     * @property string|null $custom_product_status_publish_date
     * @property float|null $custom_product_last_price
     * @property string|null $custom_product_last_price_date
     * @property bool|null $custom_product_status_price_discount
     * @property float|null $custom_product_last_price_discount_percentage
     * @property string|null $custom_product_last_price_discount_type
     * @property string|null $custom_product_index_image_url
     * @property int|null $custom_product_category_id
     * @property string|null $custom_product_category_name
     * @property int|null $custom_product_shop_id
     * @property int|null $custom_product_registry_shopkeeper_id
     * @property int|null $custom_product_quantity_total
     * @property int|null $custom_product_quantity_sold
     * @property int|null $custom_product_quantity_selling
     * @property int|null $custom_product_quantity_returned
     * @property int|null $custom_product_number_comments
     * @property float|null $custom_product_total_points
     * @property float|null $custom_product_average_points
     * @property float|null $custom_product_last_point
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property ProductCategory $customProductCategory
     * @method BelongsTo|_IH_ProductCategory_QB customProductCategory()
     * @property _IH_ProductCustomerComments_C|ProductCustomerComments[] $customProductCustomerComments
     * @property-read int $custom_product_customer_comments_count
     * @method MorphToMany|_IH_ProductCustomerComments_QB customProductCustomerComments()
     * @property _IH_ProductImage_C|ProductImage[] $customProductImages
     * @property-read int $custom_product_images_count
     * @method MorphToMany|_IH_ProductImage_QB customProductImages()
     * @property _IH_productPriceHistory_C|productPriceHistory[] $customProductPrices
     * @property-read int $custom_product_prices_count
     * @method MorphToMany|_IH_productPriceHistory_QB customProductPrices()
     * @property User $customProductSystemConfirm
     * @method BelongsTo|_IH_User_QB customProductSystemConfirm()
     * @property _IH_ProductTag_C|ProductTag[] $customProductTags
     * @property-read int $custom_product_tags_count
     * @method MorphToMany|_IH_ProductTag_QB customProductTags()
     * @property _IH_Detail_C|Detail[] $normalProductDetails
     * @property-read int $normal_product_details_count
     * @method MorphToMany|_IH_Detail_QB normalProductDetails()
     * @property _IH_ConfirmComment_C|ConfirmComment[] $normalProductStatuses
     * @property-read int $normal_product_statuses_count
     * @method MorphToMany|_IH_ConfirmComment_QB normalProductStatuses()
     * @property Shop $shop
     * @method BelongsTo|_IH_Shop_QB shop()
     * @property User $shopkeeper
     * @method BelongsTo|_IH_User_QB shopkeeper()
     * @method _IH_CustomProduct_QB newModelQuery()
     * @method _IH_CustomProduct_QB newQuery()
     * @method static _IH_CustomProduct_QB query()
     * @method static _IH_CustomProduct_C|CustomProduct[] all()
     * @method static _IH_CustomProduct_QB whereId($value)
     * @method static _IH_CustomProduct_QB whereCustomProductName($value)
     * @method static _IH_CustomProduct_QB whereCustomProductDescription($value)
     * @method static _IH_CustomProduct_QB whereCustomProductInfo($value)
     * @method static _IH_CustomProduct_QB whereCustomProductNote($value)
     * @method static _IH_CustomProduct_QB whereCustomProductStatusAccept($value)
     * @method static _IH_CustomProduct_QB whereCustomProductStatusConfirmUserId($value)
     * @method static _IH_CustomProduct_QB whereCustomProductStatusConfirmUserComment($value)
     * @method static _IH_CustomProduct_QB whereCustomProductStatusPublish($value)
     * @method static _IH_CustomProduct_QB whereCustomProductStatusPublishDate($value)
     * @method static _IH_CustomProduct_QB whereCustomProductLastPrice($value)
     * @method static _IH_CustomProduct_QB whereCustomProductLastPriceDate($value)
     * @method static _IH_CustomProduct_QB whereCustomProductStatusPriceDiscount($value)
     * @method static _IH_CustomProduct_QB whereCustomProductLastPriceDiscountPercentage($value)
     * @method static _IH_CustomProduct_QB whereCustomProductLastPriceDiscountType($value)
     * @method static _IH_CustomProduct_QB whereCustomProductIndexImageUrl($value)
     * @method static _IH_CustomProduct_QB whereCustomProductCategoryId($value)
     * @method static _IH_CustomProduct_QB whereCustomProductCategoryName($value)
     * @method static _IH_CustomProduct_QB whereCustomProductShopId($value)
     * @method static _IH_CustomProduct_QB whereCustomProductRegistryShopkeeperId($value)
     * @method static _IH_CustomProduct_QB whereCustomProductQuantityTotal($value)
     * @method static _IH_CustomProduct_QB whereCustomProductQuantitySold($value)
     * @method static _IH_CustomProduct_QB whereCustomProductQuantitySelling($value)
     * @method static _IH_CustomProduct_QB whereCustomProductQuantityReturned($value)
     * @method static _IH_CustomProduct_QB whereCustomProductNumberComments($value)
     * @method static _IH_CustomProduct_QB whereCustomProductTotalPoints($value)
     * @method static _IH_CustomProduct_QB whereCustomProductAveragePoints($value)
     * @method static _IH_CustomProduct_QB whereCustomProductLastPoint($value)
     * @method static _IH_CustomProduct_QB whereDeletedAt($value)
     * @method static _IH_CustomProduct_QB whereCreatedAt($value)
     * @method static _IH_CustomProduct_QB whereUpdatedAt($value)
     * @method static CustomProduct baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static CustomProduct create(array $attributes = [])
     * @method static _IH_CustomProduct_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_CustomProduct_C|CustomProduct[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_CustomProduct_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_CustomProduct_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static CustomProduct|null find($id, array $columns = ['*'])
     * @method static _IH_CustomProduct_C|CustomProduct[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static CustomProduct findOrFail($id, array $columns = ['*'])
     * @method static CustomProduct findOrNew($id, array $columns = ['*'])
     * @method static CustomProduct first(array|string $columns = ['*'])
     * @method static CustomProduct firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static CustomProduct firstOrCreate(array $attributes = [], array $values = [])
     * @method static CustomProduct firstOrFail(array $columns = ['*'])
     * @method static CustomProduct firstOrNew(array $attributes = [], array $values = [])
     * @method static CustomProduct firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static CustomProduct forceCreate(array $attributes)
     * @method static _IH_CustomProduct_C|CustomProduct[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_CustomProduct_C|CustomProduct[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static CustomProduct getModel()
     * @method static CustomProduct[] getModels(array|string $columns = ['*'])
     * @method static _IH_CustomProduct_QB getQuery()
     * @method static _IH_CustomProduct_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_CustomProduct_C|CustomProduct[] hydrate(array $items)
     * @method static _IH_CustomProduct_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_CustomProduct_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_CustomProduct_QB latest(Expression|string $column = null)
     * @method static _IH_CustomProduct_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_CustomProduct_QB limit(int $value)
     * @method static CustomProduct make(array $attributes = [])
     * @method static CustomProduct newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_CustomProduct_QB offset(int $value)
     * @method static _IH_CustomProduct_QB oldest(Expression|string $column = null)
     * @method static _IH_CustomProduct_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_CustomProduct_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_CustomProduct_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|CustomProduct[]|_IH_CustomProduct_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_CustomProduct_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_CustomProduct_QB select(array|mixed $columns = ['*'])
     * @method static _IH_CustomProduct_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|CustomProduct[]|_IH_CustomProduct_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_CustomProduct_QB skip(int $value)
     * @method static CustomProduct sole(array|string $columns = ['*'])
     * @method static _IH_CustomProduct_QB take(int $value)
     * @method static _IH_CustomProduct_QB tap(callable $callback)
     * @method static _IH_CustomProduct_QB truncate()
     * @method static _IH_CustomProduct_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static CustomProduct updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_CustomProduct_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_CustomProduct_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomProduct_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomProduct_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_CustomProduct_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_CustomProduct_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomProduct_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_CustomProduct_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_CustomProduct_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomProduct_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomProduct_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomProduct_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereKey($id)
     * @method static _IH_CustomProduct_QB whereKeyNot($id)
     * @method static _IH_CustomProduct_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomProduct_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomProduct_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_CustomProduct_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_CustomProduct_QB withAvg(array|string $relation, string $column)
     * @method static _IH_CustomProduct_QB withCasts(array $casts)
     * @method static _IH_CustomProduct_QB withCount($relations)
     * @method static _IH_CustomProduct_QB withExists(array|string $relation)
     * @method static _IH_CustomProduct_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_CustomProduct_QB withMax(array|string $relation, string $column)
     * @method static _IH_CustomProduct_QB withMin(array|string $relation, string $column)
     * @method static _IH_CustomProduct_QB withOnly($relations)
     * @method static _IH_CustomProduct_QB withSum(array|string $relation, string $column)
     * @method static _IH_CustomProduct_QB without($relations)
     * @method static _IH_CustomProduct_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_CustomProduct_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_CustomProduct_QB withTrashed()
     * @method static _IH_CustomProduct_QB onlyTrashed()
     * @method static _IH_CustomProduct_QB withoutTrashed()
     */
    class CustomProduct extends Model {}
    
    /**
     * @property int $id
     * @property string|null $custom_services_name
     * @property string|null $custom_services_description
     * @property string|null $custom_services_info
     * @property string|null $custom_services_note
     * @property bool|null $custom_services_status_accept
     * @property int|null $custom_services_status_confirm_user_id
     * @property string|null $custom_services_status_confirm_user_comment
     * @property bool|null $custom_services_status_publish
     * @property string|null $custom_services_status_publish_date
     * @property int|null $custom_services_last_price
     * @property string|null $custom_services_last_price_date
     * @property bool|null $custom_services_status_price_discount
     * @property float|null $custom_services_last_price_discount_percentage
     * @property string|null $custom_services_last_price_discount_type
     * @property string|null $custom_services_index_image_url
     * @property int|null $custom_services_category_id
     * @property string|null $custom_services_category_name
     * @property int|null $custom_services_shop_id
     * @property int|null $custom_services_registry_shopkeeper_id
     * @property int|null $custom_services_quantity_sold
     * @property int|null $custom_services_quantity_selling
     * @property int|null $custom_services_quantity_returned
     * @property int|null $custom_services_number_comments
     * @property float|null $custom_services_total_points
     * @property float|null $custom_services_average_points
     * @property float|null $custom_services_last_point
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property ProductCategory $customProductCategory
     * @method BelongsTo|_IH_ProductCategory_QB customProductCategory()
     * @property _IH_ProductCustomerComments_C|ProductCustomerComments[] $customServiceCustomerComments
     * @property-read int $custom_service_customer_comments_count
     * @method MorphToMany|_IH_ProductCustomerComments_QB customServiceCustomerComments()
     * @property _IH_ProductImage_C|ProductImage[] $customServiceImages
     * @property-read int $custom_service_images_count
     * @method MorphToMany|_IH_ProductImage_QB customServiceImages()
     * @property _IH_productPriceHistory_C|productPriceHistory[] $customServicePrices
     * @property-read int $custom_service_prices_count
     * @method MorphToMany|_IH_productPriceHistory_QB customServicePrices()
     * @property User $customServiceSystemConfirm
     * @method BelongsTo|_IH_User_QB customServiceSystemConfirm()
     * @property _IH_ProductTag_C|ProductTag[] $customServiceTags
     * @property-read int $custom_service_tags_count
     * @method MorphToMany|_IH_ProductTag_QB customServiceTags()
     * @property _IH_Detail_C|Detail[] $normalProductDetails
     * @property-read int $normal_product_details_count
     * @method MorphToMany|_IH_Detail_QB normalProductDetails()
     * @property _IH_ConfirmComment_C|ConfirmComment[] $normalProductStatuses
     * @property-read int $normal_product_statuses_count
     * @method MorphToMany|_IH_ConfirmComment_QB normalProductStatuses()
     * @property Shop $shop
     * @method BelongsTo|_IH_Shop_QB shop()
     * @property User $shopkeeper
     * @method BelongsTo|_IH_User_QB shopkeeper()
     * @method _IH_CustomService_QB newModelQuery()
     * @method _IH_CustomService_QB newQuery()
     * @method static _IH_CustomService_QB query()
     * @method static _IH_CustomService_C|CustomService[] all()
     * @method static _IH_CustomService_QB whereId($value)
     * @method static _IH_CustomService_QB whereCustomServicesName($value)
     * @method static _IH_CustomService_QB whereCustomServicesDescription($value)
     * @method static _IH_CustomService_QB whereCustomServicesInfo($value)
     * @method static _IH_CustomService_QB whereCustomServicesNote($value)
     * @method static _IH_CustomService_QB whereCustomServicesStatusAccept($value)
     * @method static _IH_CustomService_QB whereCustomServicesStatusConfirmUserId($value)
     * @method static _IH_CustomService_QB whereCustomServicesStatusConfirmUserComment($value)
     * @method static _IH_CustomService_QB whereCustomServicesStatusPublish($value)
     * @method static _IH_CustomService_QB whereCustomServicesStatusPublishDate($value)
     * @method static _IH_CustomService_QB whereCustomServicesLastPrice($value)
     * @method static _IH_CustomService_QB whereCustomServicesLastPriceDate($value)
     * @method static _IH_CustomService_QB whereCustomServicesStatusPriceDiscount($value)
     * @method static _IH_CustomService_QB whereCustomServicesLastPriceDiscountPercentage($value)
     * @method static _IH_CustomService_QB whereCustomServicesLastPriceDiscountType($value)
     * @method static _IH_CustomService_QB whereCustomServicesIndexImageUrl($value)
     * @method static _IH_CustomService_QB whereCustomServicesCategoryId($value)
     * @method static _IH_CustomService_QB whereCustomServicesCategoryName($value)
     * @method static _IH_CustomService_QB whereCustomServicesShopId($value)
     * @method static _IH_CustomService_QB whereCustomServicesRegistryShopkeeperId($value)
     * @method static _IH_CustomService_QB whereCustomServicesQuantitySold($value)
     * @method static _IH_CustomService_QB whereCustomServicesQuantitySelling($value)
     * @method static _IH_CustomService_QB whereCustomServicesQuantityReturned($value)
     * @method static _IH_CustomService_QB whereCustomServicesNumberComments($value)
     * @method static _IH_CustomService_QB whereCustomServicesTotalPoints($value)
     * @method static _IH_CustomService_QB whereCustomServicesAveragePoints($value)
     * @method static _IH_CustomService_QB whereCustomServicesLastPoint($value)
     * @method static _IH_CustomService_QB whereDeletedAt($value)
     * @method static _IH_CustomService_QB whereCreatedAt($value)
     * @method static _IH_CustomService_QB whereUpdatedAt($value)
     * @method static CustomService baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static CustomService create(array $attributes = [])
     * @method static _IH_CustomService_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_CustomService_C|CustomService[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_CustomService_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_CustomService_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static CustomService|null find($id, array $columns = ['*'])
     * @method static _IH_CustomService_C|CustomService[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static CustomService findOrFail($id, array $columns = ['*'])
     * @method static CustomService findOrNew($id, array $columns = ['*'])
     * @method static CustomService first(array|string $columns = ['*'])
     * @method static CustomService firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static CustomService firstOrCreate(array $attributes = [], array $values = [])
     * @method static CustomService firstOrFail(array $columns = ['*'])
     * @method static CustomService firstOrNew(array $attributes = [], array $values = [])
     * @method static CustomService firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static CustomService forceCreate(array $attributes)
     * @method static _IH_CustomService_C|CustomService[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_CustomService_C|CustomService[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static CustomService getModel()
     * @method static CustomService[] getModels(array|string $columns = ['*'])
     * @method static _IH_CustomService_QB getQuery()
     * @method static _IH_CustomService_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_CustomService_C|CustomService[] hydrate(array $items)
     * @method static _IH_CustomService_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_CustomService_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_CustomService_QB latest(Expression|string $column = null)
     * @method static _IH_CustomService_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_CustomService_QB limit(int $value)
     * @method static CustomService make(array $attributes = [])
     * @method static CustomService newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_CustomService_QB offset(int $value)
     * @method static _IH_CustomService_QB oldest(Expression|string $column = null)
     * @method static _IH_CustomService_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_CustomService_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_CustomService_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|CustomService[]|_IH_CustomService_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_CustomService_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_CustomService_QB select(array|mixed $columns = ['*'])
     * @method static _IH_CustomService_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|CustomService[]|_IH_CustomService_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_CustomService_QB skip(int $value)
     * @method static CustomService sole(array|string $columns = ['*'])
     * @method static _IH_CustomService_QB take(int $value)
     * @method static _IH_CustomService_QB tap(callable $callback)
     * @method static _IH_CustomService_QB truncate()
     * @method static _IH_CustomService_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static CustomService updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_CustomService_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_CustomService_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomService_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomService_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_CustomService_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_CustomService_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_CustomService_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomService_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_CustomService_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_CustomService_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomService_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomService_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomService_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereKey($id)
     * @method static _IH_CustomService_QB whereKeyNot($id)
     * @method static _IH_CustomService_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_CustomService_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_CustomService_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomService_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_CustomService_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_CustomService_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_CustomService_QB withAvg(array|string $relation, string $column)
     * @method static _IH_CustomService_QB withCasts(array $casts)
     * @method static _IH_CustomService_QB withCount($relations)
     * @method static _IH_CustomService_QB withExists(array|string $relation)
     * @method static _IH_CustomService_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_CustomService_QB withMax(array|string $relation, string $column)
     * @method static _IH_CustomService_QB withMin(array|string $relation, string $column)
     * @method static _IH_CustomService_QB withOnly($relations)
     * @method static _IH_CustomService_QB withSum(array|string $relation, string $column)
     * @method static _IH_CustomService_QB without($relations)
     * @method static _IH_CustomService_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_CustomService_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_CustomService_QB withTrashed()
     * @method static _IH_CustomService_QB onlyTrashed()
     * @method static _IH_CustomService_QB withoutTrashed()
     */
    class CustomService extends Model {}
    
    /**
     * @property int $id
     * @property int|null $normal_product_id
     * @property string|null $normal_product_name
     * @property int|null $normal_product_attribute_name_id
     * @property string|null $normal_product_attribute_name
     * @property int|null $normal_product_attribute_value_id
     * @property string|null $normal_product_attribute_value
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property string|null $type
     * @property int|null $price_id
     * @property float|null $price_value
     * @property Model $detilable
     * @method MorphTo detilable()
     * @method _IH_Detail_QB newModelQuery()
     * @method _IH_Detail_QB newQuery()
     * @method static _IH_Detail_QB query()
     * @method static _IH_Detail_C|Detail[] all()
     * @method static _IH_Detail_QB whereId($value)
     * @method static _IH_Detail_QB whereNormalProductId($value)
     * @method static _IH_Detail_QB whereNormalProductName($value)
     * @method static _IH_Detail_QB whereNormalProductAttributeNameId($value)
     * @method static _IH_Detail_QB whereNormalProductAttributeName($value)
     * @method static _IH_Detail_QB whereNormalProductAttributeValueId($value)
     * @method static _IH_Detail_QB whereNormalProductAttributeValue($value)
     * @method static _IH_Detail_QB whereDeletedAt($value)
     * @method static _IH_Detail_QB whereCreatedAt($value)
     * @method static _IH_Detail_QB whereUpdatedAt($value)
     * @method static _IH_Detail_QB whereType($value)
     * @method static _IH_Detail_QB wherePriceId($value)
     * @method static _IH_Detail_QB wherePriceValue($value)
     * @method static Detail baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Detail create(array $attributes = [])
     * @method static _IH_Detail_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Detail_C|Detail[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Detail_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Detail_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Detail|null find($id, array $columns = ['*'])
     * @method static _IH_Detail_C|Detail[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Detail findOrFail($id, array $columns = ['*'])
     * @method static Detail findOrNew($id, array $columns = ['*'])
     * @method static Detail first(array|string $columns = ['*'])
     * @method static Detail firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Detail firstOrCreate(array $attributes = [], array $values = [])
     * @method static Detail firstOrFail(array $columns = ['*'])
     * @method static Detail firstOrNew(array $attributes = [], array $values = [])
     * @method static Detail firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Detail forceCreate(array $attributes)
     * @method static _IH_Detail_C|Detail[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Detail_C|Detail[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Detail getModel()
     * @method static Detail[] getModels(array|string $columns = ['*'])
     * @method static _IH_Detail_QB getQuery()
     * @method static _IH_Detail_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Detail_C|Detail[] hydrate(array $items)
     * @method static _IH_Detail_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Detail_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Detail_QB latest(Expression|string $column = null)
     * @method static _IH_Detail_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Detail_QB limit(int $value)
     * @method static Detail make(array $attributes = [])
     * @method static Detail newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Detail_QB offset(int $value)
     * @method static _IH_Detail_QB oldest(Expression|string $column = null)
     * @method static _IH_Detail_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Detail_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Detail_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Detail[]|_IH_Detail_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Detail_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Detail_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Detail_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Detail[]|_IH_Detail_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Detail_QB skip(int $value)
     * @method static Detail sole(array|string $columns = ['*'])
     * @method static _IH_Detail_QB take(int $value)
     * @method static _IH_Detail_QB tap(callable $callback)
     * @method static _IH_Detail_QB truncate()
     * @method static _IH_Detail_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Detail updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Detail_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Detail_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Detail_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Detail_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Detail_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Detail_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Detail_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Detail_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Detail_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Detail_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Detail_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Detail_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Detail_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Detail_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Detail_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Detail_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Detail_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Detail_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Detail_QB whereKey($id)
     * @method static _IH_Detail_QB whereKeyNot($id)
     * @method static _IH_Detail_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Detail_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Detail_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Detail_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Detail_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Detail_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Detail_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Detail_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Detail_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Detail_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Detail_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Detail_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Detail_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Detail_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Detail_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Detail_QB withCasts(array $casts)
     * @method static _IH_Detail_QB withCount($relations)
     * @method static _IH_Detail_QB withExists(array|string $relation)
     * @method static _IH_Detail_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Detail_QB withMax(array|string $relation, string $column)
     * @method static _IH_Detail_QB withMin(array|string $relation, string $column)
     * @method static _IH_Detail_QB withOnly($relations)
     * @method static _IH_Detail_QB withSum(array|string $relation, string $column)
     * @method static _IH_Detail_QB without($relations)
     * @method static _IH_Detail_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Detail_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Detail_QB withTrashed()
     * @method static _IH_Detail_QB onlyTrashed()
     * @method static _IH_Detail_QB withoutTrashed()
     */
    class Detail extends Model {}
    
    /**
     * @method _IH_Membership_QB newModelQuery()
     * @method _IH_Membership_QB newQuery()
     * @method static _IH_Membership_QB query()
     * @method static _IH_Membership_C|Membership[] all()
     * @method static Membership baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Membership create(array $attributes = [])
     * @method static _IH_Membership_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Membership_C|Membership[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Membership_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Membership_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Membership|null find($id, array $columns = ['*'])
     * @method static _IH_Membership_C|Membership[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Membership findOrFail($id, array $columns = ['*'])
     * @method static Membership findOrNew($id, array $columns = ['*'])
     * @method static Membership first(array|string $columns = ['*'])
     * @method static Membership firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Membership firstOrCreate(array $attributes = [], array $values = [])
     * @method static Membership firstOrFail(array $columns = ['*'])
     * @method static Membership firstOrNew(array $attributes = [], array $values = [])
     * @method static Membership firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Membership forceCreate(array $attributes)
     * @method static _IH_Membership_C|Membership[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Membership_C|Membership[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Membership getModel()
     * @method static Membership[] getModels(array|string $columns = ['*'])
     * @method static _IH_Membership_QB getQuery()
     * @method static _IH_Membership_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Membership_C|Membership[] hydrate(array $items)
     * @method static _IH_Membership_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Membership_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Membership_QB latest(Expression|string $column = null)
     * @method static _IH_Membership_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Membership_QB limit(int $value)
     * @method static Membership make(array $attributes = [])
     * @method static Membership newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Membership_QB offset(int $value)
     * @method static _IH_Membership_QB oldest(Expression|string $column = null)
     * @method static _IH_Membership_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Membership_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Membership_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Membership[]|_IH_Membership_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Membership_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Membership_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Membership_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Membership[]|_IH_Membership_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Membership_QB skip(int $value)
     * @method static Membership sole(array|string $columns = ['*'])
     * @method static _IH_Membership_QB take(int $value)
     * @method static _IH_Membership_QB tap(callable $callback)
     * @method static _IH_Membership_QB truncate()
     * @method static _IH_Membership_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Membership updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Membership_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Membership_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Membership_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Membership_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Membership_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Membership_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Membership_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Membership_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereKey($id)
     * @method static _IH_Membership_QB whereKeyNot($id)
     * @method static _IH_Membership_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Membership_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Membership_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Membership_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Membership_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Membership_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Membership_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Membership_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Membership_QB withCasts(array $casts)
     * @method static _IH_Membership_QB withCount($relations)
     * @method static _IH_Membership_QB withExists(array|string $relation)
     * @method static _IH_Membership_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Membership_QB withMax(array|string $relation, string $column)
     * @method static _IH_Membership_QB withMin(array|string $relation, string $column)
     * @method static _IH_Membership_QB withOnly($relations)
     * @method static _IH_Membership_QB withSum(array|string $relation, string $column)
     * @method static _IH_Membership_QB without($relations)
     * @method static _IH_Membership_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Membership_QB withoutGlobalScopes(array $scopes = null)
     */
    class Membership extends Model {}
    
    /**
     * @property int $id
     * @property string|null $product_name
     * @property string|null $product_description
     * @property string|null $product_info
     * @property string|null $product_note
     * @property bool|null $product_status_accept
     * @property int|null $product_status_confirm_user_id
     * @property string|null $product_status_confirm_user_comment
     * @property bool|null $product_status_publish
     * @property string|null $product_status_publish_date
     * @property int|null $product_last_price
     * @property string|null $product_last_price_date
     * @property bool|null $product_status_price_discount
     * @property float|null $product_last_price_discount_percentage
     * @property string|null $product_last_price_discount_type
     * @property string|null $product_index_image_url
     * @property int|null $product_category_id
     * @property int|null $product_shop_id
     * @property int|null $product_registry_shopkeeper_id
     * @property int|null $product_quantity_total
     * @property int|null $product_quantity_sold
     * @property int|null $product_quantity_selling
     * @property int|null $product_quantity_returned
     * @property int|null $product_number_comments
     * @property float|null $product_total_points
     * @property float|null $product_average_points
     * @property float|null $product_last_point
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property string|null $product_category_name
     * @property ProductCategory $normalProductCategory
     * @method BelongsTo|_IH_ProductCategory_QB normalProductCategory()
     * @property _IH_ProductCustomerComments_C|ProductCustomerComments[] $normalProductCustomerComments
     * @property-read int $normal_product_customer_comments_count
     * @method MorphToMany|_IH_ProductCustomerComments_QB normalProductCustomerComments()
     * @property _IH_Detail_C|Detail[] $normalProductDetails
     * @property-read int $normal_product_details_count
     * @method MorphToMany|_IH_Detail_QB normalProductDetails()
     * @property _IH_ProductImage_C|ProductImage[] $normalProductImages
     * @property-read int $normal_product_images_count
     * @method MorphToMany|_IH_ProductImage_QB normalProductImages()
     * @property _IH_productPriceHistory_C|productPriceHistory[] $normalProductPrices
     * @property-read int $normal_product_prices_count
     * @method MorphToMany|_IH_productPriceHistory_QB normalProductPrices()
     * @property _IH_ConfirmComment_C|ConfirmComment[] $normalProductStatuses
     * @property-read int $normal_product_statuses_count
     * @method MorphToMany|_IH_ConfirmComment_QB normalProductStatuses()
     * @property User $normalProductSystemConfirm
     * @method BelongsTo|_IH_User_QB normalProductSystemConfirm()
     * @property _IH_NormalProduct_C|NormalProduct[] $normalProductTags
     * @property-read int $normal_product_tags_count
     * @method MorphToMany|_IH_NormalProduct_QB normalProductTags()
     * @property Shop $shop
     * @method BelongsTo|_IH_Shop_QB shop()
     * @property User $shopkeeper
     * @method BelongsTo|_IH_User_QB shopkeeper()
     * @method _IH_NormalProduct_QB newModelQuery()
     * @method _IH_NormalProduct_QB newQuery()
     * @method static _IH_NormalProduct_QB query()
     * @method static _IH_NormalProduct_C|NormalProduct[] all()
     * @method static _IH_NormalProduct_QB whereId($value)
     * @method static _IH_NormalProduct_QB whereProductName($value)
     * @method static _IH_NormalProduct_QB whereProductDescription($value)
     * @method static _IH_NormalProduct_QB whereProductInfo($value)
     * @method static _IH_NormalProduct_QB whereProductNote($value)
     * @method static _IH_NormalProduct_QB whereProductStatusAccept($value)
     * @method static _IH_NormalProduct_QB whereProductStatusConfirmUserId($value)
     * @method static _IH_NormalProduct_QB whereProductStatusConfirmUserComment($value)
     * @method static _IH_NormalProduct_QB whereProductStatusPublish($value)
     * @method static _IH_NormalProduct_QB whereProductStatusPublishDate($value)
     * @method static _IH_NormalProduct_QB whereProductLastPrice($value)
     * @method static _IH_NormalProduct_QB whereProductLastPriceDate($value)
     * @method static _IH_NormalProduct_QB whereProductStatusPriceDiscount($value)
     * @method static _IH_NormalProduct_QB whereProductLastPriceDiscountPercentage($value)
     * @method static _IH_NormalProduct_QB whereProductLastPriceDiscountType($value)
     * @method static _IH_NormalProduct_QB whereProductIndexImageUrl($value)
     * @method static _IH_NormalProduct_QB whereProductCategoryId($value)
     * @method static _IH_NormalProduct_QB whereProductShopId($value)
     * @method static _IH_NormalProduct_QB whereProductRegistryShopkeeperId($value)
     * @method static _IH_NormalProduct_QB whereProductQuantityTotal($value)
     * @method static _IH_NormalProduct_QB whereProductQuantitySold($value)
     * @method static _IH_NormalProduct_QB whereProductQuantitySelling($value)
     * @method static _IH_NormalProduct_QB whereProductQuantityReturned($value)
     * @method static _IH_NormalProduct_QB whereProductNumberComments($value)
     * @method static _IH_NormalProduct_QB whereProductTotalPoints($value)
     * @method static _IH_NormalProduct_QB whereProductAveragePoints($value)
     * @method static _IH_NormalProduct_QB whereProductLastPoint($value)
     * @method static _IH_NormalProduct_QB whereDeletedAt($value)
     * @method static _IH_NormalProduct_QB whereCreatedAt($value)
     * @method static _IH_NormalProduct_QB whereUpdatedAt($value)
     * @method static _IH_NormalProduct_QB whereProductCategoryName($value)
     * @method static NormalProduct baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static NormalProduct create(array $attributes = [])
     * @method static _IH_NormalProduct_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_NormalProduct_C|NormalProduct[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_NormalProduct_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_NormalProduct_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static NormalProduct|null find($id, array $columns = ['*'])
     * @method static _IH_NormalProduct_C|NormalProduct[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static NormalProduct findOrFail($id, array $columns = ['*'])
     * @method static NormalProduct findOrNew($id, array $columns = ['*'])
     * @method static NormalProduct first(array|string $columns = ['*'])
     * @method static NormalProduct firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static NormalProduct firstOrCreate(array $attributes = [], array $values = [])
     * @method static NormalProduct firstOrFail(array $columns = ['*'])
     * @method static NormalProduct firstOrNew(array $attributes = [], array $values = [])
     * @method static NormalProduct firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static NormalProduct forceCreate(array $attributes)
     * @method static _IH_NormalProduct_C|NormalProduct[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_NormalProduct_C|NormalProduct[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static NormalProduct getModel()
     * @method static NormalProduct[] getModels(array|string $columns = ['*'])
     * @method static _IH_NormalProduct_QB getQuery()
     * @method static _IH_NormalProduct_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_NormalProduct_C|NormalProduct[] hydrate(array $items)
     * @method static _IH_NormalProduct_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_NormalProduct_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_NormalProduct_QB latest(Expression|string $column = null)
     * @method static _IH_NormalProduct_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_NormalProduct_QB limit(int $value)
     * @method static NormalProduct make(array $attributes = [])
     * @method static NormalProduct newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_NormalProduct_QB offset(int $value)
     * @method static _IH_NormalProduct_QB oldest(Expression|string $column = null)
     * @method static _IH_NormalProduct_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_NormalProduct_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_NormalProduct_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|NormalProduct[]|_IH_NormalProduct_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_NormalProduct_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_NormalProduct_QB select(array|mixed $columns = ['*'])
     * @method static _IH_NormalProduct_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|NormalProduct[]|_IH_NormalProduct_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_NormalProduct_QB skip(int $value)
     * @method static NormalProduct sole(array|string $columns = ['*'])
     * @method static _IH_NormalProduct_QB take(int $value)
     * @method static _IH_NormalProduct_QB tap(callable $callback)
     * @method static _IH_NormalProduct_QB truncate()
     * @method static _IH_NormalProduct_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static NormalProduct updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_NormalProduct_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_NormalProduct_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalProduct_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalProduct_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_NormalProduct_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_NormalProduct_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalProduct_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_NormalProduct_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_NormalProduct_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalProduct_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalProduct_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalProduct_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereKey($id)
     * @method static _IH_NormalProduct_QB whereKeyNot($id)
     * @method static _IH_NormalProduct_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalProduct_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalProduct_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_NormalProduct_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_NormalProduct_QB withAvg(array|string $relation, string $column)
     * @method static _IH_NormalProduct_QB withCasts(array $casts)
     * @method static _IH_NormalProduct_QB withCount($relations)
     * @method static _IH_NormalProduct_QB withExists(array|string $relation)
     * @method static _IH_NormalProduct_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_NormalProduct_QB withMax(array|string $relation, string $column)
     * @method static _IH_NormalProduct_QB withMin(array|string $relation, string $column)
     * @method static _IH_NormalProduct_QB withOnly($relations)
     * @method static _IH_NormalProduct_QB withSum(array|string $relation, string $column)
     * @method static _IH_NormalProduct_QB without($relations)
     * @method static _IH_NormalProduct_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_NormalProduct_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_NormalProduct_QB withTrashed()
     * @method static _IH_NormalProduct_QB onlyTrashed()
     * @method static _IH_NormalProduct_QB withoutTrashed()
     */
    class NormalProduct extends Model {}
    
    /**
     * @property int $id
     * @property string|null $normal_service_name
     * @property int|null $normal_service_timespan_by_minutes
     * @property int|null $normal_service_number_sessions
     * @property float|null $normal_service_last_price
     * @property string|null $normal_service_last_price_date
     * @property bool|null $normal_service_status_price_discount
     * @property float|null $normal_service_last_price_discount_percentage
     * @property string|null $normal_service_last_price_discount_type
     * @property string|null $normal_service_index_image_url
     * @property int|null $normal_service_category_id
     * @property string|null $normal_service_category_name
     * @property int|null $normal_service_shop_id
     * @property int|null $normal_service_registry_shopkeeper_id
     * @property bool|null $normal_service_status_accept
     * @property int|null $normal_service_status_confirm_user_id
     * @property string|null $normal_service_status_confirm_user_comment
     * @property bool|null $normal_service_status_publish
     * @property string|null $normal_service_status_publish_date
     * @property int|null $normal_service_number_comments
     * @property float|null $normal_service_total_points
     * @property float|null $normal_service_average_points
     * @property float|null $normal_service_last_point
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property ProductCategory $customProductCategory
     * @method BelongsTo|_IH_ProductCategory_QB customProductCategory()
     * @property _IH_ProductCustomerComments_C|ProductCustomerComments[] $customProductCustomerComments
     * @property-read int $custom_product_customer_comments_count
     * @method MorphToMany|_IH_ProductCustomerComments_QB customProductCustomerComments()
     * @property _IH_ProductImage_C|ProductImage[] $customProductImages
     * @property-read int $custom_product_images_count
     * @method MorphToMany|_IH_ProductImage_QB customProductImages()
     * @property _IH_productPriceHistory_C|productPriceHistory[] $customProductPrices
     * @property-read int $custom_product_prices_count
     * @method MorphToMany|_IH_productPriceHistory_QB customProductPrices()
     * @property User $customProductSystemConfirm
     * @method BelongsTo|_IH_User_QB customProductSystemConfirm()
     * @property _IH_ProductTag_C|ProductTag[] $customProductTags
     * @property-read int $custom_product_tags_count
     * @method MorphToMany|_IH_ProductTag_QB customProductTags()
     * @property _IH_Detail_C|Detail[] $normalProductDetails
     * @property-read int $normal_product_details_count
     * @method MorphToMany|_IH_Detail_QB normalProductDetails()
     * @property _IH_ConfirmComment_C|ConfirmComment[] $normalProductStatuses
     * @property-read int $normal_product_statuses_count
     * @method MorphToMany|_IH_ConfirmComment_QB normalProductStatuses()
     * @property Shop $shop
     * @method BelongsTo|_IH_Shop_QB shop()
     * @property User $shopkeeper
     * @method BelongsTo|_IH_User_QB shopkeeper()
     * @method _IH_NormalService_QB newModelQuery()
     * @method _IH_NormalService_QB newQuery()
     * @method static _IH_NormalService_QB query()
     * @method static _IH_NormalService_C|NormalService[] all()
     * @method static _IH_NormalService_QB whereId($value)
     * @method static _IH_NormalService_QB whereNormalServiceName($value)
     * @method static _IH_NormalService_QB whereNormalServiceTimespanByMinutes($value)
     * @method static _IH_NormalService_QB whereNormalServiceNumberSessions($value)
     * @method static _IH_NormalService_QB whereNormalServiceLastPrice($value)
     * @method static _IH_NormalService_QB whereNormalServiceLastPriceDate($value)
     * @method static _IH_NormalService_QB whereNormalServiceStatusPriceDiscount($value)
     * @method static _IH_NormalService_QB whereNormalServiceLastPriceDiscountPercentage($value)
     * @method static _IH_NormalService_QB whereNormalServiceLastPriceDiscountType($value)
     * @method static _IH_NormalService_QB whereNormalServiceIndexImageUrl($value)
     * @method static _IH_NormalService_QB whereNormalServiceCategoryId($value)
     * @method static _IH_NormalService_QB whereNormalServiceCategoryName($value)
     * @method static _IH_NormalService_QB whereNormalServiceShopId($value)
     * @method static _IH_NormalService_QB whereNormalServiceRegistryShopkeeperId($value)
     * @method static _IH_NormalService_QB whereNormalServiceStatusAccept($value)
     * @method static _IH_NormalService_QB whereNormalServiceStatusConfirmUserId($value)
     * @method static _IH_NormalService_QB whereNormalServiceStatusConfirmUserComment($value)
     * @method static _IH_NormalService_QB whereNormalServiceStatusPublish($value)
     * @method static _IH_NormalService_QB whereNormalServiceStatusPublishDate($value)
     * @method static _IH_NormalService_QB whereNormalServiceNumberComments($value)
     * @method static _IH_NormalService_QB whereNormalServiceTotalPoints($value)
     * @method static _IH_NormalService_QB whereNormalServiceAveragePoints($value)
     * @method static _IH_NormalService_QB whereNormalServiceLastPoint($value)
     * @method static _IH_NormalService_QB whereDeletedAt($value)
     * @method static _IH_NormalService_QB whereCreatedAt($value)
     * @method static _IH_NormalService_QB whereUpdatedAt($value)
     * @method static NormalService baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static NormalService create(array $attributes = [])
     * @method static _IH_NormalService_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_NormalService_C|NormalService[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_NormalService_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_NormalService_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static NormalService|null find($id, array $columns = ['*'])
     * @method static _IH_NormalService_C|NormalService[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static NormalService findOrFail($id, array $columns = ['*'])
     * @method static NormalService findOrNew($id, array $columns = ['*'])
     * @method static NormalService first(array|string $columns = ['*'])
     * @method static NormalService firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static NormalService firstOrCreate(array $attributes = [], array $values = [])
     * @method static NormalService firstOrFail(array $columns = ['*'])
     * @method static NormalService firstOrNew(array $attributes = [], array $values = [])
     * @method static NormalService firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static NormalService forceCreate(array $attributes)
     * @method static _IH_NormalService_C|NormalService[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_NormalService_C|NormalService[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static NormalService getModel()
     * @method static NormalService[] getModels(array|string $columns = ['*'])
     * @method static _IH_NormalService_QB getQuery()
     * @method static _IH_NormalService_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_NormalService_C|NormalService[] hydrate(array $items)
     * @method static _IH_NormalService_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_NormalService_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_NormalService_QB latest(Expression|string $column = null)
     * @method static _IH_NormalService_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_NormalService_QB limit(int $value)
     * @method static NormalService make(array $attributes = [])
     * @method static NormalService newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_NormalService_QB offset(int $value)
     * @method static _IH_NormalService_QB oldest(Expression|string $column = null)
     * @method static _IH_NormalService_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_NormalService_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_NormalService_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|NormalService[]|_IH_NormalService_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_NormalService_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_NormalService_QB select(array|mixed $columns = ['*'])
     * @method static _IH_NormalService_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|NormalService[]|_IH_NormalService_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_NormalService_QB skip(int $value)
     * @method static NormalService sole(array|string $columns = ['*'])
     * @method static _IH_NormalService_QB take(int $value)
     * @method static _IH_NormalService_QB tap(callable $callback)
     * @method static _IH_NormalService_QB truncate()
     * @method static _IH_NormalService_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static NormalService updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_NormalService_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_NormalService_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalService_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalService_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_NormalService_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_NormalService_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_NormalService_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalService_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_NormalService_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_NormalService_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalService_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalService_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalService_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereKey($id)
     * @method static _IH_NormalService_QB whereKeyNot($id)
     * @method static _IH_NormalService_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_NormalService_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_NormalService_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalService_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_NormalService_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_NormalService_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_NormalService_QB withAvg(array|string $relation, string $column)
     * @method static _IH_NormalService_QB withCasts(array $casts)
     * @method static _IH_NormalService_QB withCount($relations)
     * @method static _IH_NormalService_QB withExists(array|string $relation)
     * @method static _IH_NormalService_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_NormalService_QB withMax(array|string $relation, string $column)
     * @method static _IH_NormalService_QB withMin(array|string $relation, string $column)
     * @method static _IH_NormalService_QB withOnly($relations)
     * @method static _IH_NormalService_QB withSum(array|string $relation, string $column)
     * @method static _IH_NormalService_QB without($relations)
     * @method static _IH_NormalService_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_NormalService_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_NormalService_QB withTrashed()
     * @method static _IH_NormalService_QB onlyTrashed()
     * @method static _IH_NormalService_QB withoutTrashed()
     */
    class NormalService extends Model {}
    
    /**
     * @property int $id
     * @property string|null $product_category_name
     * @property string $product_category_image_url
     * @property int|null $product_categoryable_id
     * @property string|null $product_categoryable_type
     * @property int|null $product_category_additional_user_id
     * @property string|null $product_category_additional_user_type
     * @property bool|null $product_category_accept_status
     * @property bool $product_category_publish_status
     * @property string|null $product_category_show_status
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property int|null $parent_id
     * @property _IH_NormalProduct_C|NormalProduct[] $Products
     * @property-read int $products_count
     * @method HasMany|_IH_NormalProduct_QB Products()
     * @property User $categoryAdditionalUser
     * @method BelongsTo|_IH_User_QB categoryAdditionalUser()
     * @property _IH_CustomProduct_C|CustomProduct[] $customProducts
     * @property-read int $custom_products_count
     * @method HasMany|_IH_CustomProduct_QB customProducts()
     * @property _IH_CustomService_C|CustomService[] $customServices
     * @property-read int $custom_services_count
     * @method HasMany|_IH_CustomService_QB customServices()
     * @property _IH_NormalProduct_C|NormalProduct[] $normalProducts
     * @property-read int $normal_products_count
     * @method HasMany|_IH_NormalProduct_QB normalProducts()
     * @property _IH_NormalService_C|NormalService[] $normalServices
     * @property-read int $normal_services_count
     * @method HasMany|_IH_NormalService_QB normalServices()
     * @method _IH_ProductCategory_QB newModelQuery()
     * @method _IH_ProductCategory_QB newQuery()
     * @method static _IH_ProductCategory_QB query()
     * @method static _IH_ProductCategory_C|ProductCategory[] all()
     * @method static _IH_ProductCategory_QB whereId($value)
     * @method static _IH_ProductCategory_QB whereProductCategoryName($value)
     * @method static _IH_ProductCategory_QB whereProductCategoryImageUrl($value)
     * @method static _IH_ProductCategory_QB whereProductCategoryableId($value)
     * @method static _IH_ProductCategory_QB whereProductCategoryableType($value)
     * @method static _IH_ProductCategory_QB whereProductCategoryAdditionalUserId($value)
     * @method static _IH_ProductCategory_QB whereProductCategoryAdditionalUserType($value)
     * @method static _IH_ProductCategory_QB whereProductCategoryAcceptStatus($value)
     * @method static _IH_ProductCategory_QB whereProductCategoryPublishStatus($value)
     * @method static _IH_ProductCategory_QB whereProductCategoryShowStatus($value)
     * @method static _IH_ProductCategory_QB whereDeletedAt($value)
     * @method static _IH_ProductCategory_QB whereCreatedAt($value)
     * @method static _IH_ProductCategory_QB whereUpdatedAt($value)
     * @method static _IH_ProductCategory_QB whereParentId($value)
     * @method static ProductCategory baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static ProductCategory create(array $attributes = [])
     * @method static _IH_ProductCategory_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductCategory_C|ProductCategory[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_ProductCategory_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_ProductCategory_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static ProductCategory|null find($id, array $columns = ['*'])
     * @method static _IH_ProductCategory_C|ProductCategory[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static ProductCategory findOrFail($id, array $columns = ['*'])
     * @method static ProductCategory findOrNew($id, array $columns = ['*'])
     * @method static ProductCategory first(array|string $columns = ['*'])
     * @method static ProductCategory firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static ProductCategory firstOrCreate(array $attributes = [], array $values = [])
     * @method static ProductCategory firstOrFail(array $columns = ['*'])
     * @method static ProductCategory firstOrNew(array $attributes = [], array $values = [])
     * @method static ProductCategory firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static ProductCategory forceCreate(array $attributes)
     * @method static _IH_ProductCategory_C|ProductCategory[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_ProductCategory_C|ProductCategory[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static ProductCategory getModel()
     * @method static ProductCategory[] getModels(array|string $columns = ['*'])
     * @method static _IH_ProductCategory_QB getQuery()
     * @method static _IH_ProductCategory_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_ProductCategory_C|ProductCategory[] hydrate(array $items)
     * @method static _IH_ProductCategory_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_ProductCategory_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_ProductCategory_QB latest(Expression|string $column = null)
     * @method static _IH_ProductCategory_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductCategory_QB limit(int $value)
     * @method static ProductCategory make(array $attributes = [])
     * @method static ProductCategory newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_ProductCategory_QB offset(int $value)
     * @method static _IH_ProductCategory_QB oldest(Expression|string $column = null)
     * @method static _IH_ProductCategory_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_ProductCategory_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_ProductCategory_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|ProductCategory[]|_IH_ProductCategory_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ProductCategory_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductCategory_QB select(array|mixed $columns = ['*'])
     * @method static _IH_ProductCategory_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|ProductCategory[]|_IH_ProductCategory_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ProductCategory_QB skip(int $value)
     * @method static ProductCategory sole(array|string $columns = ['*'])
     * @method static _IH_ProductCategory_QB take(int $value)
     * @method static _IH_ProductCategory_QB tap(callable $callback)
     * @method static _IH_ProductCategory_QB truncate()
     * @method static _IH_ProductCategory_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static ProductCategory updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_ProductCategory_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_ProductCategory_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCategory_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCategory_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_ProductCategory_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_ProductCategory_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCategory_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ProductCategory_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ProductCategory_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCategory_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCategory_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCategory_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereKey($id)
     * @method static _IH_ProductCategory_QB whereKeyNot($id)
     * @method static _IH_ProductCategory_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCategory_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCategory_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_ProductCategory_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_ProductCategory_QB withAvg(array|string $relation, string $column)
     * @method static _IH_ProductCategory_QB withCasts(array $casts)
     * @method static _IH_ProductCategory_QB withCount($relations)
     * @method static _IH_ProductCategory_QB withExists(array|string $relation)
     * @method static _IH_ProductCategory_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_ProductCategory_QB withMax(array|string $relation, string $column)
     * @method static _IH_ProductCategory_QB withMin(array|string $relation, string $column)
     * @method static _IH_ProductCategory_QB withOnly($relations)
     * @method static _IH_ProductCategory_QB withSum(array|string $relation, string $column)
     * @method static _IH_ProductCategory_QB without($relations)
     * @method static _IH_ProductCategory_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_ProductCategory_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_ProductCategory_QB withTrashed()
     * @method static _IH_ProductCategory_QB onlyTrashed()
     * @method static _IH_ProductCategory_QB withoutTrashed()
     */
    class ProductCategory extends Model {}
    
    /**
     * @property int $id
     * @property string|null $product_customer_comment
     * @property int|null $product_customer_rate
     * @property int|null $user_id
     * @property string|null $product_customer_rate_weight_type
     * @property int|null $product_customer_rate_weight
     * @property int|null $product_customer_last_sum_rate
     * @property int|null $product_customer_last_average_rate
     * @property int|null $product_commentable_id
     * @property string|null $product_commentable_type
     * @property bool|null $product_customer_comment_access_status
     * @property bool|null $product_customer_comment_status
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property Model $product_commentable
     * @method MorphTo product_commentable()
     * @method _IH_ProductCustomerComments_QB newModelQuery()
     * @method _IH_ProductCustomerComments_QB newQuery()
     * @method static _IH_ProductCustomerComments_QB query()
     * @method static _IH_ProductCustomerComments_C|ProductCustomerComments[] all()
     * @method static _IH_ProductCustomerComments_QB whereId($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCustomerComment($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCustomerRate($value)
     * @method static _IH_ProductCustomerComments_QB whereUserId($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCustomerRateWeightType($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCustomerRateWeight($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCustomerLastSumRate($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCustomerLastAverageRate($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCommentableId($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCommentableType($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCustomerCommentAccessStatus($value)
     * @method static _IH_ProductCustomerComments_QB whereProductCustomerCommentStatus($value)
     * @method static _IH_ProductCustomerComments_QB whereDeletedAt($value)
     * @method static _IH_ProductCustomerComments_QB whereCreatedAt($value)
     * @method static _IH_ProductCustomerComments_QB whereUpdatedAt($value)
     * @method static ProductCustomerComments baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static ProductCustomerComments create(array $attributes = [])
     * @method static _IH_ProductCustomerComments_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductCustomerComments_C|ProductCustomerComments[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_ProductCustomerComments_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_ProductCustomerComments_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static ProductCustomerComments|null find($id, array $columns = ['*'])
     * @method static _IH_ProductCustomerComments_C|ProductCustomerComments[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static ProductCustomerComments findOrFail($id, array $columns = ['*'])
     * @method static ProductCustomerComments findOrNew($id, array $columns = ['*'])
     * @method static ProductCustomerComments first(array|string $columns = ['*'])
     * @method static ProductCustomerComments firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static ProductCustomerComments firstOrCreate(array $attributes = [], array $values = [])
     * @method static ProductCustomerComments firstOrFail(array $columns = ['*'])
     * @method static ProductCustomerComments firstOrNew(array $attributes = [], array $values = [])
     * @method static ProductCustomerComments firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static ProductCustomerComments forceCreate(array $attributes)
     * @method static _IH_ProductCustomerComments_C|ProductCustomerComments[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_ProductCustomerComments_C|ProductCustomerComments[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static ProductCustomerComments getModel()
     * @method static ProductCustomerComments[] getModels(array|string $columns = ['*'])
     * @method static _IH_ProductCustomerComments_QB getQuery()
     * @method static _IH_ProductCustomerComments_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_ProductCustomerComments_C|ProductCustomerComments[] hydrate(array $items)
     * @method static _IH_ProductCustomerComments_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_ProductCustomerComments_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_ProductCustomerComments_QB latest(Expression|string $column = null)
     * @method static _IH_ProductCustomerComments_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductCustomerComments_QB limit(int $value)
     * @method static ProductCustomerComments make(array $attributes = [])
     * @method static ProductCustomerComments newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_ProductCustomerComments_QB offset(int $value)
     * @method static _IH_ProductCustomerComments_QB oldest(Expression|string $column = null)
     * @method static _IH_ProductCustomerComments_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_ProductCustomerComments_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_ProductCustomerComments_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|ProductCustomerComments[]|_IH_ProductCustomerComments_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ProductCustomerComments_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductCustomerComments_QB select(array|mixed $columns = ['*'])
     * @method static _IH_ProductCustomerComments_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|ProductCustomerComments[]|_IH_ProductCustomerComments_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ProductCustomerComments_QB skip(int $value)
     * @method static ProductCustomerComments sole(array|string $columns = ['*'])
     * @method static _IH_ProductCustomerComments_QB take(int $value)
     * @method static _IH_ProductCustomerComments_QB tap(callable $callback)
     * @method static _IH_ProductCustomerComments_QB truncate()
     * @method static _IH_ProductCustomerComments_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static ProductCustomerComments updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_ProductCustomerComments_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_ProductCustomerComments_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCustomerComments_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCustomerComments_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_ProductCustomerComments_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_ProductCustomerComments_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCustomerComments_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ProductCustomerComments_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ProductCustomerComments_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCustomerComments_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCustomerComments_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCustomerComments_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereKey($id)
     * @method static _IH_ProductCustomerComments_QB whereKeyNot($id)
     * @method static _IH_ProductCustomerComments_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductCustomerComments_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductCustomerComments_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_ProductCustomerComments_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_ProductCustomerComments_QB withAvg(array|string $relation, string $column)
     * @method static _IH_ProductCustomerComments_QB withCasts(array $casts)
     * @method static _IH_ProductCustomerComments_QB withCount($relations)
     * @method static _IH_ProductCustomerComments_QB withExists(array|string $relation)
     * @method static _IH_ProductCustomerComments_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_ProductCustomerComments_QB withMax(array|string $relation, string $column)
     * @method static _IH_ProductCustomerComments_QB withMin(array|string $relation, string $column)
     * @method static _IH_ProductCustomerComments_QB withOnly($relations)
     * @method static _IH_ProductCustomerComments_QB withSum(array|string $relation, string $column)
     * @method static _IH_ProductCustomerComments_QB without($relations)
     * @method static _IH_ProductCustomerComments_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_ProductCustomerComments_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_ProductCustomerComments_QB withTrashed()
     * @method static _IH_ProductCustomerComments_QB onlyTrashed()
     * @method static _IH_ProductCustomerComments_QB withoutTrashed()
     */
    class ProductCustomerComments extends Model {}
    
    /**
     * @property Model $product_imageable
     * @method MorphTo product_imageable()
     * @method _IH_ProductImage_QB newModelQuery()
     * @method _IH_ProductImage_QB newQuery()
     * @method static _IH_ProductImage_QB query()
     * @method static _IH_ProductImage_C|ProductImage[] all()
     * @method static ProductImage baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static ProductImage create(array $attributes = [])
     * @method static _IH_ProductImage_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductImage_C|ProductImage[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_ProductImage_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_ProductImage_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static ProductImage|null find($id, array $columns = ['*'])
     * @method static _IH_ProductImage_C|ProductImage[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static ProductImage findOrFail($id, array $columns = ['*'])
     * @method static ProductImage findOrNew($id, array $columns = ['*'])
     * @method static ProductImage first(array|string $columns = ['*'])
     * @method static ProductImage firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static ProductImage firstOrCreate(array $attributes = [], array $values = [])
     * @method static ProductImage firstOrFail(array $columns = ['*'])
     * @method static ProductImage firstOrNew(array $attributes = [], array $values = [])
     * @method static ProductImage firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static ProductImage forceCreate(array $attributes)
     * @method static _IH_ProductImage_C|ProductImage[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_ProductImage_C|ProductImage[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static ProductImage getModel()
     * @method static ProductImage[] getModels(array|string $columns = ['*'])
     * @method static _IH_ProductImage_QB getQuery()
     * @method static _IH_ProductImage_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_ProductImage_C|ProductImage[] hydrate(array $items)
     * @method static _IH_ProductImage_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_ProductImage_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_ProductImage_QB latest(Expression|string $column = null)
     * @method static _IH_ProductImage_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductImage_QB limit(int $value)
     * @method static ProductImage make(array $attributes = [])
     * @method static ProductImage newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_ProductImage_QB offset(int $value)
     * @method static _IH_ProductImage_QB oldest(Expression|string $column = null)
     * @method static _IH_ProductImage_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_ProductImage_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_ProductImage_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|ProductImage[]|_IH_ProductImage_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ProductImage_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductImage_QB select(array|mixed $columns = ['*'])
     * @method static _IH_ProductImage_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|ProductImage[]|_IH_ProductImage_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ProductImage_QB skip(int $value)
     * @method static ProductImage sole(array|string $columns = ['*'])
     * @method static _IH_ProductImage_QB take(int $value)
     * @method static _IH_ProductImage_QB tap(callable $callback)
     * @method static _IH_ProductImage_QB truncate()
     * @method static _IH_ProductImage_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static ProductImage updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_ProductImage_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_ProductImage_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductImage_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductImage_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_ProductImage_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_ProductImage_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductImage_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ProductImage_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ProductImage_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductImage_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductImage_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductImage_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereKey($id)
     * @method static _IH_ProductImage_QB whereKeyNot($id)
     * @method static _IH_ProductImage_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductImage_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductImage_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductImage_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_ProductImage_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_ProductImage_QB withAvg(array|string $relation, string $column)
     * @method static _IH_ProductImage_QB withCasts(array $casts)
     * @method static _IH_ProductImage_QB withCount($relations)
     * @method static _IH_ProductImage_QB withExists(array|string $relation)
     * @method static _IH_ProductImage_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_ProductImage_QB withMax(array|string $relation, string $column)
     * @method static _IH_ProductImage_QB withMin(array|string $relation, string $column)
     * @method static _IH_ProductImage_QB withOnly($relations)
     * @method static _IH_ProductImage_QB withSum(array|string $relation, string $column)
     * @method static _IH_ProductImage_QB without($relations)
     * @method static _IH_ProductImage_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_ProductImage_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_ProductImage_QB withTrashed()
     * @method static _IH_ProductImage_QB onlyTrashed()
     * @method static _IH_ProductImage_QB withoutTrashed()
     */
    class ProductImage extends Model {}
    
    /**
     * @property int $id
     * @property string $product_tag_name
     * @property string $product_tag_image_url
     * @property bool $product_tag_publish_status
     * @property bool $product_tag_accept_status
     * @property bool $product_tag_additional_type
     * @property int $product_tag_additional_user_id
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property _IH_CustomProduct_C|CustomProduct[] $customProducts
     * @property-read int $custom_products_count
     * @method MorphToMany|_IH_CustomProduct_QB customProducts()
     * @property _IH_CustomService_C|CustomService[] $customService
     * @property-read int $custom_service_count
     * @method MorphToMany|_IH_CustomService_QB customService()
     * @property _IH_NormalProduct_C|NormalProduct[] $normalProducts
     * @property-read int $normal_products_count
     * @method MorphToMany|_IH_NormalProduct_QB normalProducts()
     * @property _IH_NormalService_C|NormalService[] $normalService
     * @property-read int $normal_service_count
     * @method MorphToMany|_IH_NormalService_QB normalService()
     * @property User $tagAdditionalUser
     * @method BelongsTo|_IH_User_QB tagAdditionalUser()
     * @method _IH_ProductTag_QB newModelQuery()
     * @method _IH_ProductTag_QB newQuery()
     * @method static _IH_ProductTag_QB query()
     * @method static _IH_ProductTag_C|ProductTag[] all()
     * @method static _IH_ProductTag_QB whereId($value)
     * @method static _IH_ProductTag_QB whereProductTagName($value)
     * @method static _IH_ProductTag_QB whereProductTagImageUrl($value)
     * @method static _IH_ProductTag_QB whereProductTagPublishStatus($value)
     * @method static _IH_ProductTag_QB whereProductTagAcceptStatus($value)
     * @method static _IH_ProductTag_QB whereProductTagAdditionalType($value)
     * @method static _IH_ProductTag_QB whereProductTagAdditionalUserId($value)
     * @method static _IH_ProductTag_QB whereDeletedAt($value)
     * @method static _IH_ProductTag_QB whereCreatedAt($value)
     * @method static _IH_ProductTag_QB whereUpdatedAt($value)
     * @method static ProductTag baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static ProductTag create(array $attributes = [])
     * @method static _IH_ProductTag_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductTag_C|ProductTag[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_ProductTag_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_ProductTag_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static ProductTag|null find($id, array $columns = ['*'])
     * @method static _IH_ProductTag_C|ProductTag[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static ProductTag findOrFail($id, array $columns = ['*'])
     * @method static ProductTag findOrNew($id, array $columns = ['*'])
     * @method static ProductTag first(array|string $columns = ['*'])
     * @method static ProductTag firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static ProductTag firstOrCreate(array $attributes = [], array $values = [])
     * @method static ProductTag firstOrFail(array $columns = ['*'])
     * @method static ProductTag firstOrNew(array $attributes = [], array $values = [])
     * @method static ProductTag firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static ProductTag forceCreate(array $attributes)
     * @method static _IH_ProductTag_C|ProductTag[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_ProductTag_C|ProductTag[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static ProductTag getModel()
     * @method static ProductTag[] getModels(array|string $columns = ['*'])
     * @method static _IH_ProductTag_QB getQuery()
     * @method static _IH_ProductTag_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_ProductTag_C|ProductTag[] hydrate(array $items)
     * @method static _IH_ProductTag_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_ProductTag_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_ProductTag_QB latest(Expression|string $column = null)
     * @method static _IH_ProductTag_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductTag_QB limit(int $value)
     * @method static ProductTag make(array $attributes = [])
     * @method static ProductTag newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_ProductTag_QB offset(int $value)
     * @method static _IH_ProductTag_QB oldest(Expression|string $column = null)
     * @method static _IH_ProductTag_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_ProductTag_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_ProductTag_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|ProductTag[]|_IH_ProductTag_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ProductTag_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_ProductTag_QB select(array|mixed $columns = ['*'])
     * @method static _IH_ProductTag_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|ProductTag[]|_IH_ProductTag_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_ProductTag_QB skip(int $value)
     * @method static ProductTag sole(array|string $columns = ['*'])
     * @method static _IH_ProductTag_QB take(int $value)
     * @method static _IH_ProductTag_QB tap(callable $callback)
     * @method static _IH_ProductTag_QB truncate()
     * @method static _IH_ProductTag_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static ProductTag updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_ProductTag_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_ProductTag_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductTag_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductTag_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_ProductTag_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_ProductTag_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductTag_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ProductTag_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_ProductTag_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductTag_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductTag_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductTag_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereKey($id)
     * @method static _IH_ProductTag_QB whereKeyNot($id)
     * @method static _IH_ProductTag_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_ProductTag_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductTag_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_ProductTag_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_ProductTag_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_ProductTag_QB withAvg(array|string $relation, string $column)
     * @method static _IH_ProductTag_QB withCasts(array $casts)
     * @method static _IH_ProductTag_QB withCount($relations)
     * @method static _IH_ProductTag_QB withExists(array|string $relation)
     * @method static _IH_ProductTag_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_ProductTag_QB withMax(array|string $relation, string $column)
     * @method static _IH_ProductTag_QB withMin(array|string $relation, string $column)
     * @method static _IH_ProductTag_QB withOnly($relations)
     * @method static _IH_ProductTag_QB withSum(array|string $relation, string $column)
     * @method static _IH_ProductTag_QB without($relations)
     * @method static _IH_ProductTag_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_ProductTag_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_ProductTag_QB withTrashed()
     * @method static _IH_ProductTag_QB onlyTrashed()
     * @method static _IH_ProductTag_QB withoutTrashed()
     */
    class ProductTag extends Model {}
    
    /**
     * @property int|null $user_id
     * @property int|null $role_id
     * @property int|null $shop_id
     * @property Carbon|null $deleted_at
     * @property string|null $shop_type
     * @property Role $role
     * @method BelongsTo|_IH_Role_QB role()
     * @property Shop $shop
     * @method BelongsTo|_IH_Shop_QB shop()
     * @property NormalProduct $shopNormalProducts
     * @method HasOneThrough|_IH_NormalProduct_QB shopNormalProducts()
     * @property User $user
     * @method BelongsTo|_IH_User_QB user()
     * @method _IH_RolesShopsUsers_QB newModelQuery()
     * @method _IH_RolesShopsUsers_QB newQuery()
     * @method static _IH_RolesShopsUsers_QB query()
     * @method static _IH_RolesShopsUsers_C|RolesShopsUsers[] all()
     * @method static _IH_RolesShopsUsers_QB whereUserId($value)
     * @method static _IH_RolesShopsUsers_QB whereRoleId($value)
     * @method static _IH_RolesShopsUsers_QB whereShopId($value)
     * @method static _IH_RolesShopsUsers_QB whereDeletedAt($value)
     * @method static _IH_RolesShopsUsers_QB whereShopType($value)
     * @method static RolesShopsUsers baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static RolesShopsUsers create(array $attributes = [])
     * @method static _IH_RolesShopsUsers_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_RolesShopsUsers_C|RolesShopsUsers[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_RolesShopsUsers_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_RolesShopsUsers_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static RolesShopsUsers|null find($id, array $columns = ['*'])
     * @method static _IH_RolesShopsUsers_C|RolesShopsUsers[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static RolesShopsUsers findOrFail($id, array $columns = ['*'])
     * @method static RolesShopsUsers findOrNew($id, array $columns = ['*'])
     * @method static RolesShopsUsers first(array|string $columns = ['*'])
     * @method static RolesShopsUsers firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static RolesShopsUsers firstOrCreate(array $attributes = [], array $values = [])
     * @method static RolesShopsUsers firstOrFail(array $columns = ['*'])
     * @method static RolesShopsUsers firstOrNew(array $attributes = [], array $values = [])
     * @method static RolesShopsUsers firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static RolesShopsUsers forceCreate(array $attributes)
     * @method static _IH_RolesShopsUsers_C|RolesShopsUsers[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_RolesShopsUsers_C|RolesShopsUsers[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static RolesShopsUsers getModel()
     * @method static RolesShopsUsers[] getModels(array|string $columns = ['*'])
     * @method static _IH_RolesShopsUsers_QB getQuery()
     * @method static _IH_RolesShopsUsers_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_RolesShopsUsers_C|RolesShopsUsers[] hydrate(array $items)
     * @method static _IH_RolesShopsUsers_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_RolesShopsUsers_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_RolesShopsUsers_QB latest(Expression|string $column = null)
     * @method static _IH_RolesShopsUsers_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_RolesShopsUsers_QB limit(int $value)
     * @method static RolesShopsUsers make(array $attributes = [])
     * @method static RolesShopsUsers newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_RolesShopsUsers_QB offset(int $value)
     * @method static _IH_RolesShopsUsers_QB oldest(Expression|string $column = null)
     * @method static _IH_RolesShopsUsers_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_RolesShopsUsers_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_RolesShopsUsers_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|RolesShopsUsers[]|_IH_RolesShopsUsers_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_RolesShopsUsers_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_RolesShopsUsers_QB select(array|mixed $columns = ['*'])
     * @method static _IH_RolesShopsUsers_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|RolesShopsUsers[]|_IH_RolesShopsUsers_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_RolesShopsUsers_QB skip(int $value)
     * @method static RolesShopsUsers sole(array|string $columns = ['*'])
     * @method static _IH_RolesShopsUsers_QB take(int $value)
     * @method static _IH_RolesShopsUsers_QB tap(callable $callback)
     * @method static _IH_RolesShopsUsers_QB truncate()
     * @method static _IH_RolesShopsUsers_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static RolesShopsUsers updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_RolesShopsUsers_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_RolesShopsUsers_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RolesShopsUsers_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RolesShopsUsers_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_RolesShopsUsers_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_RolesShopsUsers_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_RolesShopsUsers_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_RolesShopsUsers_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_RolesShopsUsers_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RolesShopsUsers_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RolesShopsUsers_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_RolesShopsUsers_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereKey($id)
     * @method static _IH_RolesShopsUsers_QB whereKeyNot($id)
     * @method static _IH_RolesShopsUsers_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_RolesShopsUsers_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RolesShopsUsers_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_RolesShopsUsers_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_RolesShopsUsers_QB withAvg(array|string $relation, string $column)
     * @method static _IH_RolesShopsUsers_QB withCasts(array $casts)
     * @method static _IH_RolesShopsUsers_QB withCount($relations)
     * @method static _IH_RolesShopsUsers_QB withExists(array|string $relation)
     * @method static _IH_RolesShopsUsers_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_RolesShopsUsers_QB withMax(array|string $relation, string $column)
     * @method static _IH_RolesShopsUsers_QB withMin(array|string $relation, string $column)
     * @method static _IH_RolesShopsUsers_QB withOnly($relations)
     * @method static _IH_RolesShopsUsers_QB withSum(array|string $relation, string $column)
     * @method static _IH_RolesShopsUsers_QB without($relations)
     * @method static _IH_RolesShopsUsers_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_RolesShopsUsers_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_RolesShopsUsers_QB withTrashed()
     * @method static _IH_RolesShopsUsers_QB onlyTrashed()
     * @method static _IH_RolesShopsUsers_QB withoutTrashed()
     */
    class RolesShopsUsers extends Model {}
    
    /**
     * @property int $id
     * @property int|null $parent_id
     * @property string $name
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property Carbon|null $deleted_at
     * @property int|null $category_id
     * @property string|null $description
     * @property string|null $shop_photo_url
     * @property bool|null $type_location
     * @property string|null $lat_location
     * @property string|null $long_location
     * @property string|null $shop_country
     * @property string|null $shop_province
     * @property string|null $shop_city
     * @property string|null $shop_local
     * @property string|null $shop_Street
     * @property string|null $shop_alley
     * @property string|null $shop_number
     * @property string|null $shop_postal_code
     * @property string|null $shop_main_phone_number
     * @property bool|null $shop_accept_status
     * @property int|null $shop_Priority
     * @property Category $categories
     * @method BelongsTo|_IH_Category_QB categories()
     * @property _IH_Shop_C|Shop[] $child
     * @property-read int $child_count
     * @method HasMany|_IH_Shop_QB child()
     * @property _IH_CustomProduct_C|CustomProduct[] $customProducts
     * @property-read int $custom_products_count
     * @method HasMany|_IH_CustomProduct_QB customProducts()
     * @property _IH_customService_C|customService[] $customServices
     * @property-read int $custom_services_count
     * @method HasMany|_IH_customService_QB customServices()
     * @property _IH_NormalProduct_C|NormalProduct[] $normalProducts
     * @property-read int $normal_products_count
     * @method HasMany|_IH_NormalProduct_QB normalProducts()
     * @property _IH_normalService_C|normalService[] $normalServices
     * @property-read int $normal_services_count
     * @method HasMany|_IH_normalService_QB normalServices()
     * @property Shop $parent
     * @method BelongsTo|_IH_Shop_QB parent()
     * @property _IH_Role_C|Role[] $role
     * @property-read int $role_count
     * @method BelongsToMany|_IH_Role_QB role()
     * @property _IH_Role_C|Role[] $roleOfRolesShopsUsers
     * @property-read int $role_of_roles_shops_users_count
     * @method BelongsToMany|_IH_Role_QB roleOfRolesShopsUsers()
     * @property _IH_tag_C|tag[] $tags
     * @property-read int $tags_count
     * @method BelongsToMany|_IH_tag_QB tags()
     * @property _IH_tag_C|tag[] $tagsByAccept
     * @property-read int $tags_by_accept_count
     * @method BelongsToMany|_IH_tag_QB tagsByAccept()
     * @property _IH_User_C|User[] $user
     * @property-read int $user_count
     * @method BelongsToMany|_IH_User_QB user()
     * @property _IH_User_C|User[] $userOfRolesShopsUsers
     * @property-read int $user_of_roles_shops_users_count
     * @method BelongsToMany|_IH_User_QB userOfRolesShopsUsers()
     * @method _IH_Shop_QB newModelQuery()
     * @method _IH_Shop_QB newQuery()
     * @method static _IH_Shop_QB query()
     * @method static _IH_Shop_C|Shop[] all()
     * @method static _IH_Shop_QB whereId($value)
     * @method static _IH_Shop_QB whereParentId($value)
     * @method static _IH_Shop_QB whereName($value)
     * @method static _IH_Shop_QB whereCreatedAt($value)
     * @method static _IH_Shop_QB whereUpdatedAt($value)
     * @method static _IH_Shop_QB whereDeletedAt($value)
     * @method static _IH_Shop_QB whereCategoryId($value)
     * @method static _IH_Shop_QB whereDescription($value)
     * @method static _IH_Shop_QB whereShopPhotoUrl($value)
     * @method static _IH_Shop_QB whereTypeLocation($value)
     * @method static _IH_Shop_QB whereLatLocation($value)
     * @method static _IH_Shop_QB whereLongLocation($value)
     * @method static _IH_Shop_QB whereShopCountry($value)
     * @method static _IH_Shop_QB whereShopProvince($value)
     * @method static _IH_Shop_QB whereShopCity($value)
     * @method static _IH_Shop_QB whereShopLocal($value)
     * @method static _IH_Shop_QB whereShopStreet($value)
     * @method static _IH_Shop_QB whereShopAlley($value)
     * @method static _IH_Shop_QB whereShopNumber($value)
     * @method static _IH_Shop_QB whereShopPostalCode($value)
     * @method static _IH_Shop_QB whereShopMainPhoneNumber($value)
     * @method static _IH_Shop_QB whereShopAcceptStatus($value)
     * @method static _IH_Shop_QB whereShopPriority($value)
     * @method static Shop baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Shop create(array $attributes = [])
     * @method static _IH_Shop_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Shop_C|Shop[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Shop_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Shop_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Shop|null find($id, array $columns = ['*'])
     * @method static _IH_Shop_C|Shop[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Shop findOrFail($id, array $columns = ['*'])
     * @method static Shop findOrNew($id, array $columns = ['*'])
     * @method static Shop first(array|string $columns = ['*'])
     * @method static Shop firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Shop firstOrCreate(array $attributes = [], array $values = [])
     * @method static Shop firstOrFail(array $columns = ['*'])
     * @method static Shop firstOrNew(array $attributes = [], array $values = [])
     * @method static Shop firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Shop forceCreate(array $attributes)
     * @method static _IH_Shop_C|Shop[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Shop_C|Shop[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Shop getModel()
     * @method static Shop[] getModels(array|string $columns = ['*'])
     * @method static _IH_Shop_QB getQuery()
     * @method static _IH_Shop_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Shop_C|Shop[] hydrate(array $items)
     * @method static _IH_Shop_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Shop_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Shop_QB latest(Expression|string $column = null)
     * @method static _IH_Shop_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Shop_QB limit(int $value)
     * @method static Shop make(array $attributes = [])
     * @method static Shop newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Shop_QB offset(int $value)
     * @method static _IH_Shop_QB oldest(Expression|string $column = null)
     * @method static _IH_Shop_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Shop_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Shop_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Shop[]|_IH_Shop_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Shop_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Shop_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Shop_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Shop[]|_IH_Shop_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Shop_QB skip(int $value)
     * @method static Shop sole(array|string $columns = ['*'])
     * @method static _IH_Shop_QB take(int $value)
     * @method static _IH_Shop_QB tap(callable $callback)
     * @method static _IH_Shop_QB truncate()
     * @method static _IH_Shop_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Shop updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Shop_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Shop_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Shop_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Shop_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Shop_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Shop_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Shop_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Shop_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereKey($id)
     * @method static _IH_Shop_QB whereKeyNot($id)
     * @method static _IH_Shop_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Shop_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Shop_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Shop_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Shop_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Shop_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Shop_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Shop_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Shop_QB withCasts(array $casts)
     * @method static _IH_Shop_QB withCount($relations)
     * @method static _IH_Shop_QB withExists(array|string $relation)
     * @method static _IH_Shop_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Shop_QB withMax(array|string $relation, string $column)
     * @method static _IH_Shop_QB withMin(array|string $relation, string $column)
     * @method static _IH_Shop_QB withOnly($relations)
     * @method static _IH_Shop_QB withSum(array|string $relation, string $column)
     * @method static _IH_Shop_QB without($relations)
     * @method static _IH_Shop_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Shop_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Shop_QB withTrashed()
     * @method static _IH_Shop_QB onlyTrashed()
     * @method static _IH_Shop_QB withoutTrashed()
     * @method static ShopFactory factory(...$parameters)
     */
    class Shop extends Model {}
    
    /**
     * @property int $id
     * @property string|null $tag_name
     * @property bool|null $tag_accept_status
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property _IH_shop_C|shop[] $shops
     * @property-read int $shops_count
     * @method BelongsToMany|_IH_shop_QB shops()
     * @property _IH_shop_C|shop[] $shopsByAccept
     * @property-read int $shops_by_accept_count
     * @method BelongsToMany|_IH_shop_QB shopsByAccept()
     * @method _IH_Tag_QB newModelQuery()
     * @method _IH_Tag_QB newQuery()
     * @method static _IH_Tag_QB query()
     * @method static _IH_Tag_C|Tag[] all()
     * @method static _IH_Tag_QB whereId($value)
     * @method static _IH_Tag_QB whereTagName($value)
     * @method static _IH_Tag_QB whereTagAcceptStatus($value)
     * @method static _IH_Tag_QB whereDeletedAt($value)
     * @method static _IH_Tag_QB whereCreatedAt($value)
     * @method static _IH_Tag_QB whereUpdatedAt($value)
     * @method static Tag baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Tag create(array $attributes = [])
     * @method static _IH_Tag_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tag_C|Tag[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Tag_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Tag_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Tag|null find($id, array $columns = ['*'])
     * @method static _IH_Tag_C|Tag[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Tag findOrFail($id, array $columns = ['*'])
     * @method static Tag findOrNew($id, array $columns = ['*'])
     * @method static Tag first(array|string $columns = ['*'])
     * @method static Tag firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Tag firstOrCreate(array $attributes = [], array $values = [])
     * @method static Tag firstOrFail(array $columns = ['*'])
     * @method static Tag firstOrNew(array $attributes = [], array $values = [])
     * @method static Tag firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Tag forceCreate(array $attributes)
     * @method static _IH_Tag_C|Tag[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Tag_C|Tag[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Tag getModel()
     * @method static Tag[] getModels(array|string $columns = ['*'])
     * @method static _IH_Tag_QB getQuery()
     * @method static _IH_Tag_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Tag_C|Tag[] hydrate(array $items)
     * @method static _IH_Tag_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Tag_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Tag_QB latest(Expression|string $column = null)
     * @method static _IH_Tag_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tag_QB limit(int $value)
     * @method static Tag make(array $attributes = [])
     * @method static Tag newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Tag_QB offset(int $value)
     * @method static _IH_Tag_QB oldest(Expression|string $column = null)
     * @method static _IH_Tag_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Tag_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Tag_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Tag[]|_IH_Tag_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Tag_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tag_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Tag_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Tag[]|_IH_Tag_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Tag_QB skip(int $value)
     * @method static Tag sole(array|string $columns = ['*'])
     * @method static _IH_Tag_QB take(int $value)
     * @method static _IH_Tag_QB tap(callable $callback)
     * @method static _IH_Tag_QB truncate()
     * @method static _IH_Tag_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Tag updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Tag_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Tag_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Tag_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Tag_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Tag_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Tag_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Tag_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Tag_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereKey($id)
     * @method static _IH_Tag_QB whereKeyNot($id)
     * @method static _IH_Tag_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Tag_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tag_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Tag_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Tag_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tag_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Tag_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Tag_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Tag_QB withCasts(array $casts)
     * @method static _IH_Tag_QB withCount($relations)
     * @method static _IH_Tag_QB withExists(array|string $relation)
     * @method static _IH_Tag_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Tag_QB withMax(array|string $relation, string $column)
     * @method static _IH_Tag_QB withMin(array|string $relation, string $column)
     * @method static _IH_Tag_QB withOnly($relations)
     * @method static _IH_Tag_QB withSum(array|string $relation, string $column)
     * @method static _IH_Tag_QB without($relations)
     * @method static _IH_Tag_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Tag_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Tag_QB withTrashed()
     * @method static _IH_Tag_QB onlyTrashed()
     * @method static _IH_Tag_QB withoutTrashed()
     * @method static TagFactory factory(...$parameters)
     */
    class Tag extends Model {}
    
    /**
     * @property int $id
     * @property string|null $task_name
     * @property string|null $task_description
     * @property string|null $task_info
     * @property string|null $task_note
     * @property bool|null $task_status_accept
     * @property int|null $task_status_confirm_user_id
     * @property int|null $custom_services_id
     * @property string|null $task_status_confirm_user_comment
     * @property bool|null $task_status_publish
     * @property string|null $task_status_publish_date
     * @property int|null $task_last_base_price
     * @property string|null $task_last_base_price_date
     * @property bool|null $task_status_base_price_discount
     * @property float|null $task_last_base_price_discount_percentage
     * @property string|null $task_last_base_price_discount_type
     * @property int|null $task_unit_of_measurement_id
     * @property string|null $task_unit_of_measurement_name
     * @property string|null $task_index_image_url
     * @property int|null $task_category_id
     * @property string|null $task_category_name
     * @property int|null $task_shop_id
     * @property int|null $task_registry_shopkeeper_id
     * @property int|null $task_quantity_sold
     * @property int|null $task_quantity_selling
     * @property int|null $task_quantity_returned
     * @property int|null $task_number_comments
     * @property float|null $task_total_points
     * @property float|null $task_average_points
     * @property float|null $task_last_point
     * @property Carbon|null $deleted_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @method _IH_Tasks_QB newModelQuery()
     * @method _IH_Tasks_QB newQuery()
     * @method static _IH_Tasks_QB query()
     * @method static _IH_Tasks_C|Tasks[] all()
     * @method static _IH_Tasks_QB whereId($value)
     * @method static _IH_Tasks_QB whereTaskName($value)
     * @method static _IH_Tasks_QB whereTaskDescription($value)
     * @method static _IH_Tasks_QB whereTaskInfo($value)
     * @method static _IH_Tasks_QB whereTaskNote($value)
     * @method static _IH_Tasks_QB whereTaskStatusAccept($value)
     * @method static _IH_Tasks_QB whereTaskStatusConfirmUserId($value)
     * @method static _IH_Tasks_QB whereCustomServicesId($value)
     * @method static _IH_Tasks_QB whereTaskStatusConfirmUserComment($value)
     * @method static _IH_Tasks_QB whereTaskStatusPublish($value)
     * @method static _IH_Tasks_QB whereTaskStatusPublishDate($value)
     * @method static _IH_Tasks_QB whereTaskLastBasePrice($value)
     * @method static _IH_Tasks_QB whereTaskLastBasePriceDate($value)
     * @method static _IH_Tasks_QB whereTaskStatusBasePriceDiscount($value)
     * @method static _IH_Tasks_QB whereTaskLastBasePriceDiscountPercentage($value)
     * @method static _IH_Tasks_QB whereTaskLastBasePriceDiscountType($value)
     * @method static _IH_Tasks_QB whereTaskUnitOfMeasurementId($value)
     * @method static _IH_Tasks_QB whereTaskUnitOfMeasurementName($value)
     * @method static _IH_Tasks_QB whereTaskIndexImageUrl($value)
     * @method static _IH_Tasks_QB whereTaskCategoryId($value)
     * @method static _IH_Tasks_QB whereTaskCategoryName($value)
     * @method static _IH_Tasks_QB whereTaskShopId($value)
     * @method static _IH_Tasks_QB whereTaskRegistryShopkeeperId($value)
     * @method static _IH_Tasks_QB whereTaskQuantitySold($value)
     * @method static _IH_Tasks_QB whereTaskQuantitySelling($value)
     * @method static _IH_Tasks_QB whereTaskQuantityReturned($value)
     * @method static _IH_Tasks_QB whereTaskNumberComments($value)
     * @method static _IH_Tasks_QB whereTaskTotalPoints($value)
     * @method static _IH_Tasks_QB whereTaskAveragePoints($value)
     * @method static _IH_Tasks_QB whereTaskLastPoint($value)
     * @method static _IH_Tasks_QB whereDeletedAt($value)
     * @method static _IH_Tasks_QB whereCreatedAt($value)
     * @method static _IH_Tasks_QB whereUpdatedAt($value)
     * @method static Tasks baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Tasks create(array $attributes = [])
     * @method static _IH_Tasks_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tasks_C|Tasks[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Tasks_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Tasks_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Tasks|null find($id, array $columns = ['*'])
     * @method static _IH_Tasks_C|Tasks[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Tasks findOrFail($id, array $columns = ['*'])
     * @method static Tasks findOrNew($id, array $columns = ['*'])
     * @method static Tasks first(array|string $columns = ['*'])
     * @method static Tasks firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Tasks firstOrCreate(array $attributes = [], array $values = [])
     * @method static Tasks firstOrFail(array $columns = ['*'])
     * @method static Tasks firstOrNew(array $attributes = [], array $values = [])
     * @method static Tasks firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Tasks forceCreate(array $attributes)
     * @method static _IH_Tasks_C|Tasks[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Tasks_C|Tasks[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Tasks getModel()
     * @method static Tasks[] getModels(array|string $columns = ['*'])
     * @method static _IH_Tasks_QB getQuery()
     * @method static _IH_Tasks_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Tasks_C|Tasks[] hydrate(array $items)
     * @method static _IH_Tasks_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Tasks_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Tasks_QB latest(Expression|string $column = null)
     * @method static _IH_Tasks_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tasks_QB limit(int $value)
     * @method static Tasks make(array $attributes = [])
     * @method static Tasks newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Tasks_QB offset(int $value)
     * @method static _IH_Tasks_QB oldest(Expression|string $column = null)
     * @method static _IH_Tasks_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Tasks_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Tasks_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Tasks[]|_IH_Tasks_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Tasks_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Tasks_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Tasks_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Tasks[]|_IH_Tasks_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Tasks_QB skip(int $value)
     * @method static Tasks sole(array|string $columns = ['*'])
     * @method static _IH_Tasks_QB take(int $value)
     * @method static _IH_Tasks_QB tap(callable $callback)
     * @method static _IH_Tasks_QB truncate()
     * @method static _IH_Tasks_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Tasks updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Tasks_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Tasks_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tasks_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tasks_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Tasks_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Tasks_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Tasks_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tasks_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Tasks_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Tasks_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tasks_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tasks_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tasks_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereKey($id)
     * @method static _IH_Tasks_QB whereKeyNot($id)
     * @method static _IH_Tasks_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Tasks_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Tasks_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tasks_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Tasks_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Tasks_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Tasks_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Tasks_QB withCasts(array $casts)
     * @method static _IH_Tasks_QB withCount($relations)
     * @method static _IH_Tasks_QB withExists(array|string $relation)
     * @method static _IH_Tasks_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Tasks_QB withMax(array|string $relation, string $column)
     * @method static _IH_Tasks_QB withMin(array|string $relation, string $column)
     * @method static _IH_Tasks_QB withOnly($relations)
     * @method static _IH_Tasks_QB withSum(array|string $relation, string $column)
     * @method static _IH_Tasks_QB without($relations)
     * @method static _IH_Tasks_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Tasks_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Tasks_QB withTrashed()
     * @method static _IH_Tasks_QB onlyTrashed()
     * @method static _IH_Tasks_QB withoutTrashed()
     */
    class Tasks extends Model {}
    
    /**
     * @method _IH_Team_QB newModelQuery()
     * @method _IH_Team_QB newQuery()
     * @method static _IH_Team_QB query()
     * @method static _IH_Team_C|Team[] all()
     * @method static Team baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Team create(array $attributes = [])
     * @method static _IH_Team_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Team_C|Team[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Team_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Team_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Team|null find($id, array $columns = ['*'])
     * @method static _IH_Team_C|Team[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Team findOrFail($id, array $columns = ['*'])
     * @method static Team findOrNew($id, array $columns = ['*'])
     * @method static Team first(array|string $columns = ['*'])
     * @method static Team firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Team firstOrCreate(array $attributes = [], array $values = [])
     * @method static Team firstOrFail(array $columns = ['*'])
     * @method static Team firstOrNew(array $attributes = [], array $values = [])
     * @method static Team firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Team forceCreate(array $attributes)
     * @method static _IH_Team_C|Team[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Team_C|Team[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Team getModel()
     * @method static Team[] getModels(array|string $columns = ['*'])
     * @method static _IH_Team_QB getQuery()
     * @method static _IH_Team_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Team_C|Team[] hydrate(array $items)
     * @method static _IH_Team_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Team_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Team_QB latest(Expression|string $column = null)
     * @method static _IH_Team_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Team_QB limit(int $value)
     * @method static Team make(array $attributes = [])
     * @method static Team newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Team_QB offset(int $value)
     * @method static _IH_Team_QB oldest(Expression|string $column = null)
     * @method static _IH_Team_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Team_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Team_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Team[]|_IH_Team_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Team_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Team_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Team_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Team[]|_IH_Team_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Team_QB skip(int $value)
     * @method static Team sole(array|string $columns = ['*'])
     * @method static _IH_Team_QB take(int $value)
     * @method static _IH_Team_QB tap(callable $callback)
     * @method static _IH_Team_QB truncate()
     * @method static _IH_Team_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Team updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Team_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Team_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Team_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Team_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Team_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Team_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Team_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Team_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereKey($id)
     * @method static _IH_Team_QB whereKeyNot($id)
     * @method static _IH_Team_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Team_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Team_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Team_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Team_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Team_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Team_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Team_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Team_QB withCasts(array $casts)
     * @method static _IH_Team_QB withCount($relations)
     * @method static _IH_Team_QB withExists(array|string $relation)
     * @method static _IH_Team_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Team_QB withMax(array|string $relation, string $column)
     * @method static _IH_Team_QB withMin(array|string $relation, string $column)
     * @method static _IH_Team_QB withOnly($relations)
     * @method static _IH_Team_QB withSum(array|string $relation, string $column)
     * @method static _IH_Team_QB without($relations)
     * @method static _IH_Team_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Team_QB withoutGlobalScopes(array $scopes = null)
     * @method static TeamFactory factory(...$parameters)
     */
    class Team extends Model {}
    
    /**
     * @method _IH_TeamInvitation_QB newModelQuery()
     * @method _IH_TeamInvitation_QB newQuery()
     * @method static _IH_TeamInvitation_QB query()
     * @method static _IH_TeamInvitation_C|TeamInvitation[] all()
     * @method static TeamInvitation baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static TeamInvitation create(array $attributes = [])
     * @method static _IH_TeamInvitation_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_TeamInvitation_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_TeamInvitation_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static TeamInvitation|null find($id, array $columns = ['*'])
     * @method static _IH_TeamInvitation_C|TeamInvitation[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static TeamInvitation findOrFail($id, array $columns = ['*'])
     * @method static TeamInvitation findOrNew($id, array $columns = ['*'])
     * @method static TeamInvitation first(array|string $columns = ['*'])
     * @method static TeamInvitation firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static TeamInvitation firstOrCreate(array $attributes = [], array $values = [])
     * @method static TeamInvitation firstOrFail(array $columns = ['*'])
     * @method static TeamInvitation firstOrNew(array $attributes = [], array $values = [])
     * @method static TeamInvitation firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static TeamInvitation forceCreate(array $attributes)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_TeamInvitation_C|TeamInvitation[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static TeamInvitation getModel()
     * @method static TeamInvitation[] getModels(array|string $columns = ['*'])
     * @method static _IH_TeamInvitation_QB getQuery()
     * @method static _IH_TeamInvitation_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] hydrate(array $items)
     * @method static _IH_TeamInvitation_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_TeamInvitation_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_TeamInvitation_QB latest(Expression|string $column = null)
     * @method static _IH_TeamInvitation_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_QB limit(int $value)
     * @method static TeamInvitation make(array $attributes = [])
     * @method static TeamInvitation newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_TeamInvitation_QB offset(int $value)
     * @method static _IH_TeamInvitation_QB oldest(Expression|string $column = null)
     * @method static _IH_TeamInvitation_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_TeamInvitation_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_TeamInvitation_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|TeamInvitation[]|_IH_TeamInvitation_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_TeamInvitation_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_QB select(array|mixed $columns = ['*'])
     * @method static _IH_TeamInvitation_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|TeamInvitation[]|_IH_TeamInvitation_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_TeamInvitation_QB skip(int $value)
     * @method static TeamInvitation sole(array|string $columns = ['*'])
     * @method static _IH_TeamInvitation_QB take(int $value)
     * @method static _IH_TeamInvitation_QB tap(callable $callback)
     * @method static _IH_TeamInvitation_QB truncate()
     * @method static _IH_TeamInvitation_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static TeamInvitation updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_TeamInvitation_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_TeamInvitation_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_TeamInvitation_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_TeamInvitation_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_TeamInvitation_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_TeamInvitation_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereKey($id)
     * @method static _IH_TeamInvitation_QB whereKeyNot($id)
     * @method static _IH_TeamInvitation_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_TeamInvitation_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_TeamInvitation_QB withAvg(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withCasts(array $casts)
     * @method static _IH_TeamInvitation_QB withCount($relations)
     * @method static _IH_TeamInvitation_QB withExists(array|string $relation)
     * @method static _IH_TeamInvitation_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_TeamInvitation_QB withMax(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withMin(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withOnly($relations)
     * @method static _IH_TeamInvitation_QB withSum(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB without($relations)
     * @method static _IH_TeamInvitation_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_TeamInvitation_QB withoutGlobalScopes(array $scopes = null)
     */
    class TeamInvitation extends Model {}
    
    /**
     * @property int $id
     * @property string|null $name
     * @property string|null $email
     * @property Carbon|null $email_verified_at
     * @property string|null $password
     * @property string|null $remember_token
     * @property int|null $current_team_id
     * @property string|null $profile_photo_path
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property string|null $two_factor_secret
     * @property string|null $two_factor_recovery_codes
     * @property Carbon|null $deleted_at
     * @property int|null $disable_by
     * @property Carbon|null $disable_at
     * @property string|null $username
     * @property string|null $mobile
     * @property Carbon|null $mobile_verified_at
     * @property string $mobile_verified_code
     * @property Carbon|null $mobile_verified_code_expire_time
     * @property string|null $first_name
     * @property string|null $last_name
     * @property-read string $profile_photo_url
     * @property _IH_CustomProduct_C|CustomProduct[] $confirmUserCustomProduct
     * @property-read int $confirm_user_custom_product_count
     * @method HasMany|_IH_CustomProduct_QB confirmUserCustomProduct()
     * @property _IH_CustomService_C|CustomService[] $confirmUserCustomService
     * @property-read int $confirm_user_custom_service_count
     * @method HasMany|_IH_CustomService_QB confirmUserCustomService()
     * @property _IH_NormalProduct_C|NormalProduct[] $confirmUserNormalProduct
     * @property-read int $confirm_user_normal_product_count
     * @method HasMany|_IH_NormalProduct_QB confirmUserNormalProduct()
     * @property _IH_NormalService_C|NormalService[] $confirmUserNormalService
     * @property-read int $confirm_user_normal_service_count
     * @method HasMany|_IH_NormalService_QB confirmUserNormalService()
     * @property User $disabledBy
     * @method BelongsTo|_IH_User_QB disabledBy()
     * @property _IH_User_C|User[] $disabling
     * @property-read int $disabling_count
     * @method HasMany|_IH_User_QB disabling()
     * @property _IH_DatabaseNotification_C|DatabaseNotification[] $notifications
     * @property-read int $notifications_count
     * @method MorphToMany|_IH_DatabaseNotification_QB notifications()
     * @property _IH_Permission_C|Permission[] $permissions
     * @property-read int $permissions_count
     * @method MorphToMany|_IH_Permission_QB permissions()
     * @property _IH_ProductCategory_C|ProductCategory[] $productCategoryAdditionalUser
     * @property-read int $product_category_additional_user_count
     * @method HasMany|_IH_ProductCategory_QB productCategoryAdditionalUser()
     * @property _IH_ProductTag_C|ProductTag[] $productTagAdditionalUser
     * @property-read int $product_tag_additional_user_count
     * @method HasMany|_IH_ProductTag_QB productTagAdditionalUser()
     * @property _IH_RolesShopsUsers_C|RolesShopsUsers[] $roleShopUser
     * @property-read int $role_shop_user_count
     * @method HasMany|_IH_RolesShopsUsers_QB roleShopUser()
     * @property _IH_Role_C|Role[] $roles
     * @property-read int $roles_count
     * @method MorphToMany|_IH_Role_QB roles()
     * @property _IH_Shop_C|Shop[] $shop
     * @property-read int $shop_count
     * @method BelongsToMany|_IH_Shop_QB shop()
     * @property _IH_CustomProduct_C|CustomProduct[] $shopkeeperCustomProduct
     * @property-read int $shopkeeper_custom_product_count
     * @method HasMany|_IH_CustomProduct_QB shopkeeperCustomProduct()
     * @property _IH_CustomService_C|CustomService[] $shopkeeperCustomService
     * @property-read int $shopkeeper_custom_service_count
     * @method HasMany|_IH_CustomService_QB shopkeeperCustomService()
     * @property _IH_NormalProduct_C|NormalProduct[] $shopkeeperNormalProduct
     * @property-read int $shopkeeper_normal_product_count
     * @method HasMany|_IH_NormalProduct_QB shopkeeperNormalProduct()
     * @property _IH_NormalService_C|NormalService[] $shopkeeperNormalService
     * @property-read int $shopkeeper_normal_service_count
     * @method HasMany|_IH_NormalService_QB shopkeeperNormalService()
     * @method _IH_User_QB newModelQuery()
     * @method _IH_User_QB newQuery()
     * @method static _IH_User_QB query()
     * @method static _IH_User_C|User[] all()
     * @method static _IH_User_QB whereId($value)
     * @method static _IH_User_QB whereName($value)
     * @method static _IH_User_QB whereEmail($value)
     * @method static _IH_User_QB whereEmailVerifiedAt($value)
     * @method static _IH_User_QB wherePassword($value)
     * @method static _IH_User_QB whereRememberToken($value)
     * @method static _IH_User_QB whereCurrentTeamId($value)
     * @method static _IH_User_QB whereProfilePhotoPath($value)
     * @method static _IH_User_QB whereCreatedAt($value)
     * @method static _IH_User_QB whereUpdatedAt($value)
     * @method static _IH_User_QB whereTwoFactorSecret($value)
     * @method static _IH_User_QB whereTwoFactorRecoveryCodes($value)
     * @method static _IH_User_QB whereDeletedAt($value)
     * @method static _IH_User_QB whereDisableBy($value)
     * @method static _IH_User_QB whereDisableAt($value)
     * @method static _IH_User_QB whereUsername($value)
     * @method static _IH_User_QB whereMobile($value)
     * @method static _IH_User_QB whereMobileVerifiedAt($value)
     * @method static _IH_User_QB whereMobileVerifiedCode($value)
     * @method static _IH_User_QB whereMobileVerifiedCodeExpireTime($value)
     * @method static _IH_User_QB whereFirstName($value)
     * @method static _IH_User_QB whereLastName($value)
     * @method static User baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static User create(array $attributes = [])
     * @method static _IH_User_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_User_C|User[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_User_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_User_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static User|null find($id, array $columns = ['*'])
     * @method static _IH_User_C|User[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static User findOrFail($id, array $columns = ['*'])
     * @method static User findOrNew($id, array $columns = ['*'])
     * @method static User first(array|string $columns = ['*'])
     * @method static User firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static User firstOrCreate(array $attributes = [], array $values = [])
     * @method static User firstOrFail(array $columns = ['*'])
     * @method static User firstOrNew(array $attributes = [], array $values = [])
     * @method static User firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static User forceCreate(array $attributes)
     * @method static _IH_User_C|User[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_User_C|User[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static User getModel()
     * @method static User[] getModels(array|string $columns = ['*'])
     * @method static _IH_User_QB getQuery()
     * @method static _IH_User_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_User_C|User[] hydrate(array $items)
     * @method static _IH_User_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_User_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_User_QB latest(Expression|string $column = null)
     * @method static _IH_User_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_User_QB limit(int $value)
     * @method static User make(array $attributes = [])
     * @method static User newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_User_QB offset(int $value)
     * @method static _IH_User_QB oldest(Expression|string $column = null)
     * @method static _IH_User_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_User_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_User_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|User[]|_IH_User_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_User_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_User_QB select(array|mixed $columns = ['*'])
     * @method static _IH_User_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|User[]|_IH_User_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_User_QB skip(int $value)
     * @method static User sole(array|string $columns = ['*'])
     * @method static _IH_User_QB take(int $value)
     * @method static _IH_User_QB tap(callable $callback)
     * @method static _IH_User_QB truncate()
     * @method static _IH_User_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static User updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_User_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_User_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_User_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_User_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_User_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_User_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_User_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_User_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_User_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereKey($id)
     * @method static _IH_User_QB whereKeyNot($id)
     * @method static _IH_User_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_User_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_User_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_User_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_User_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_User_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_User_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_User_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_User_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_User_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_User_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_User_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_User_QB withAvg(array|string $relation, string $column)
     * @method static _IH_User_QB withCasts(array $casts)
     * @method static _IH_User_QB withCount($relations)
     * @method static _IH_User_QB withExists(array|string $relation)
     * @method static _IH_User_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_User_QB withMax(array|string $relation, string $column)
     * @method static _IH_User_QB withMin(array|string $relation, string $column)
     * @method static _IH_User_QB withOnly($relations)
     * @method static _IH_User_QB withSum(array|string $relation, string $column)
     * @method static _IH_User_QB without($relations)
     * @method static _IH_User_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_User_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_User_QB withTrashed()
     * @method static _IH_User_QB onlyTrashed()
     * @method static _IH_User_QB withoutTrashed()
     * @method static _IH_User_QB permission(array|Collection|Permission1|string $permissions)
     * @method static _IH_User_QB role(array|Collection|Role1|string $roles, string $guard = null)
     * @method static UserFactory factory(...$parameters)
     */
    class User extends Model {}
    
    /**
     * @property Model $product_price_historiable
     * @method MorphTo product_price_historiable()
     * @method _IH_productPriceHistory_QB newModelQuery()
     * @method _IH_productPriceHistory_QB newQuery()
     * @method static _IH_productPriceHistory_QB query()
     * @method static _IH_productPriceHistory_C|productPriceHistory[] all()
     * @method static productPriceHistory baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static productPriceHistory create(array $attributes = [])
     * @method static _IH_productPriceHistory_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_productPriceHistory_C|productPriceHistory[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_productPriceHistory_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_productPriceHistory_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static productPriceHistory|null find($id, array $columns = ['*'])
     * @method static _IH_productPriceHistory_C|productPriceHistory[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static productPriceHistory findOrFail($id, array $columns = ['*'])
     * @method static productPriceHistory findOrNew($id, array $columns = ['*'])
     * @method static productPriceHistory first(array|string $columns = ['*'])
     * @method static productPriceHistory firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static productPriceHistory firstOrCreate(array $attributes = [], array $values = [])
     * @method static productPriceHistory firstOrFail(array $columns = ['*'])
     * @method static productPriceHistory firstOrNew(array $attributes = [], array $values = [])
     * @method static productPriceHistory firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static productPriceHistory forceCreate(array $attributes)
     * @method static _IH_productPriceHistory_C|productPriceHistory[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_productPriceHistory_C|productPriceHistory[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static productPriceHistory getModel()
     * @method static productPriceHistory[] getModels(array|string $columns = ['*'])
     * @method static _IH_productPriceHistory_QB getQuery()
     * @method static _IH_productPriceHistory_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_productPriceHistory_C|productPriceHistory[] hydrate(array $items)
     * @method static _IH_productPriceHistory_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_productPriceHistory_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_productPriceHistory_QB latest(Expression|string $column = null)
     * @method static _IH_productPriceHistory_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_productPriceHistory_QB limit(int $value)
     * @method static productPriceHistory make(array $attributes = [])
     * @method static productPriceHistory newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_productPriceHistory_QB offset(int $value)
     * @method static _IH_productPriceHistory_QB oldest(Expression|string $column = null)
     * @method static _IH_productPriceHistory_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_productPriceHistory_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_productPriceHistory_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|productPriceHistory[]|_IH_productPriceHistory_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_productPriceHistory_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_productPriceHistory_QB select(array|mixed $columns = ['*'])
     * @method static _IH_productPriceHistory_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|productPriceHistory[]|_IH_productPriceHistory_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_productPriceHistory_QB skip(int $value)
     * @method static productPriceHistory sole(array|string $columns = ['*'])
     * @method static _IH_productPriceHistory_QB take(int $value)
     * @method static _IH_productPriceHistory_QB tap(callable $callback)
     * @method static _IH_productPriceHistory_QB truncate()
     * @method static _IH_productPriceHistory_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static productPriceHistory updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_productPriceHistory_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_productPriceHistory_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_productPriceHistory_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_productPriceHistory_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_productPriceHistory_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_productPriceHistory_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_productPriceHistory_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_productPriceHistory_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_productPriceHistory_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_productPriceHistory_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_productPriceHistory_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_productPriceHistory_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereKey($id)
     * @method static _IH_productPriceHistory_QB whereKeyNot($id)
     * @method static _IH_productPriceHistory_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_productPriceHistory_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_productPriceHistory_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_productPriceHistory_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_productPriceHistory_QB withAvg(array|string $relation, string $column)
     * @method static _IH_productPriceHistory_QB withCasts(array $casts)
     * @method static _IH_productPriceHistory_QB withCount($relations)
     * @method static _IH_productPriceHistory_QB withExists(array|string $relation)
     * @method static _IH_productPriceHistory_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_productPriceHistory_QB withMax(array|string $relation, string $column)
     * @method static _IH_productPriceHistory_QB withMin(array|string $relation, string $column)
     * @method static _IH_productPriceHistory_QB withOnly($relations)
     * @method static _IH_productPriceHistory_QB withSum(array|string $relation, string $column)
     * @method static _IH_productPriceHistory_QB without($relations)
     * @method static _IH_productPriceHistory_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_productPriceHistory_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_productPriceHistory_QB withTrashed()
     * @method static _IH_productPriceHistory_QB onlyTrashed()
     * @method static _IH_productPriceHistory_QB withoutTrashed()
     */
    class productPriceHistory extends Model {}
}

namespace Illuminate\Notifications {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_C;
    use LaravelIdea\Helper\Illuminate\Notifications\_IH_DatabaseNotification_QB;
    
    /**
     * @property Model $notifiable
     * @method MorphTo notifiable()
     * @method _IH_DatabaseNotification_QB newModelQuery()
     * @method _IH_DatabaseNotification_QB newQuery()
     * @method static _IH_DatabaseNotification_QB query()
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] all()
     * @method static DatabaseNotification baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static DatabaseNotification create(array $attributes = [])
     * @method static _IH_DatabaseNotification_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_DatabaseNotification_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_DatabaseNotification_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static DatabaseNotification|null find($id, array $columns = ['*'])
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static DatabaseNotification findOrFail($id, array $columns = ['*'])
     * @method static DatabaseNotification findOrNew($id, array $columns = ['*'])
     * @method static DatabaseNotification first(array|string $columns = ['*'])
     * @method static DatabaseNotification firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static DatabaseNotification firstOrCreate(array $attributes = [], array $values = [])
     * @method static DatabaseNotification firstOrFail(array $columns = ['*'])
     * @method static DatabaseNotification firstOrNew(array $attributes = [], array $values = [])
     * @method static DatabaseNotification firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static DatabaseNotification forceCreate(array $attributes)
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static DatabaseNotification getModel()
     * @method static DatabaseNotification[] getModels(array|string $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB getQuery()
     * @method static _IH_DatabaseNotification_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_DatabaseNotification_C|DatabaseNotification[] hydrate(array $items)
     * @method static _IH_DatabaseNotification_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_DatabaseNotification_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_DatabaseNotification_QB latest(Expression|string $column = null)
     * @method static _IH_DatabaseNotification_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_DatabaseNotification_QB limit(int $value)
     * @method static DatabaseNotification make(array $attributes = [])
     * @method static DatabaseNotification newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB offset(int $value)
     * @method static _IH_DatabaseNotification_QB oldest(Expression|string $column = null)
     * @method static _IH_DatabaseNotification_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_DatabaseNotification_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_DatabaseNotification_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|DatabaseNotification[]|_IH_DatabaseNotification_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_DatabaseNotification_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_DatabaseNotification_QB select(array|mixed $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|DatabaseNotification[]|_IH_DatabaseNotification_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_DatabaseNotification_QB skip(int $value)
     * @method static DatabaseNotification sole(array|string $columns = ['*'])
     * @method static _IH_DatabaseNotification_QB take(int $value)
     * @method static _IH_DatabaseNotification_QB tap(callable $callback)
     * @method static _IH_DatabaseNotification_QB truncate()
     * @method static _IH_DatabaseNotification_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static DatabaseNotification updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_DatabaseNotification_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_DatabaseNotification_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_DatabaseNotification_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_DatabaseNotification_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_DatabaseNotification_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_DatabaseNotification_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereKey($id)
     * @method static _IH_DatabaseNotification_QB whereKeyNot($id)
     * @method static _IH_DatabaseNotification_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_DatabaseNotification_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_DatabaseNotification_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_DatabaseNotification_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_DatabaseNotification_QB withAvg(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB withCasts(array $casts)
     * @method static _IH_DatabaseNotification_QB withCount($relations)
     * @method static _IH_DatabaseNotification_QB withExists(array|string $relation)
     * @method static _IH_DatabaseNotification_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_DatabaseNotification_QB withMax(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB withMin(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB withOnly($relations)
     * @method static _IH_DatabaseNotification_QB withSum(array|string $relation, string $column)
     * @method static _IH_DatabaseNotification_QB without($relations)
     * @method static _IH_DatabaseNotification_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_DatabaseNotification_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_DatabaseNotification_QB read()
     * @method static _IH_DatabaseNotification_QB unread()
     */
    class DatabaseNotification extends Model {}
}

namespace Laravel\Jetstream {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use LaravelIdea\Helper\Laravel\Jetstream\_IH_TeamInvitation_C;
    use LaravelIdea\Helper\Laravel\Jetstream\_IH_TeamInvitation_QB;
    
    /**
     * @method _IH_TeamInvitation_QB newModelQuery()
     * @method _IH_TeamInvitation_QB newQuery()
     * @method static _IH_TeamInvitation_QB query()
     * @method static _IH_TeamInvitation_C|TeamInvitation[] all()
     * @method static TeamInvitation baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static TeamInvitation create(array $attributes = [])
     * @method static _IH_TeamInvitation_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_TeamInvitation_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_TeamInvitation_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static TeamInvitation|null find($id, array $columns = ['*'])
     * @method static _IH_TeamInvitation_C|TeamInvitation[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static TeamInvitation findOrFail($id, array $columns = ['*'])
     * @method static TeamInvitation findOrNew($id, array $columns = ['*'])
     * @method static TeamInvitation first(array|string $columns = ['*'])
     * @method static TeamInvitation firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static TeamInvitation firstOrCreate(array $attributes = [], array $values = [])
     * @method static TeamInvitation firstOrFail(array $columns = ['*'])
     * @method static TeamInvitation firstOrNew(array $attributes = [], array $values = [])
     * @method static TeamInvitation firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static TeamInvitation forceCreate(array $attributes)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_TeamInvitation_C|TeamInvitation[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static TeamInvitation getModel()
     * @method static TeamInvitation[] getModels(array|string $columns = ['*'])
     * @method static _IH_TeamInvitation_QB getQuery()
     * @method static _IH_TeamInvitation_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_TeamInvitation_C|TeamInvitation[] hydrate(array $items)
     * @method static _IH_TeamInvitation_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_TeamInvitation_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_TeamInvitation_QB latest(Expression|string $column = null)
     * @method static _IH_TeamInvitation_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_QB limit(int $value)
     * @method static TeamInvitation make(array $attributes = [])
     * @method static TeamInvitation newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_TeamInvitation_QB offset(int $value)
     * @method static _IH_TeamInvitation_QB oldest(Expression|string $column = null)
     * @method static _IH_TeamInvitation_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_TeamInvitation_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_TeamInvitation_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|TeamInvitation[]|_IH_TeamInvitation_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_TeamInvitation_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_TeamInvitation_QB select(array|mixed $columns = ['*'])
     * @method static _IH_TeamInvitation_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|TeamInvitation[]|_IH_TeamInvitation_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_TeamInvitation_QB skip(int $value)
     * @method static TeamInvitation sole(array|string $columns = ['*'])
     * @method static _IH_TeamInvitation_QB take(int $value)
     * @method static _IH_TeamInvitation_QB tap(callable $callback)
     * @method static _IH_TeamInvitation_QB truncate()
     * @method static _IH_TeamInvitation_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static TeamInvitation updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_TeamInvitation_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_TeamInvitation_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_TeamInvitation_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_TeamInvitation_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_TeamInvitation_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_TeamInvitation_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereKey($id)
     * @method static _IH_TeamInvitation_QB whereKeyNot($id)
     * @method static _IH_TeamInvitation_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_TeamInvitation_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_TeamInvitation_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_TeamInvitation_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_TeamInvitation_QB withAvg(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withCasts(array $casts)
     * @method static _IH_TeamInvitation_QB withCount($relations)
     * @method static _IH_TeamInvitation_QB withExists(array|string $relation)
     * @method static _IH_TeamInvitation_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_TeamInvitation_QB withMax(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withMin(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB withOnly($relations)
     * @method static _IH_TeamInvitation_QB withSum(array|string $relation, string $column)
     * @method static _IH_TeamInvitation_QB without($relations)
     * @method static _IH_TeamInvitation_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_TeamInvitation_QB withoutGlobalScopes(array $scopes = null)
     */
    class TeamInvitation extends Model {}
}

namespace Laravel\Passport {

    use App\Models\User;
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\BelongsTo;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Laravel\Passport\Database\Factories\ClientFactory;
    use LaravelIdea\Helper\App\Models\_IH_User_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_AuthCode_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_AuthCode_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_Client_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_Client_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_PersonalAccessClient_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_PersonalAccessClient_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_RefreshToken_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_RefreshToken_QB;
    use LaravelIdea\Helper\Laravel\Passport\_IH_Token_C;
    use LaravelIdea\Helper\Laravel\Passport\_IH_Token_QB;
    
    /**
     * @method _IH_AuthCode_QB newModelQuery()
     * @method _IH_AuthCode_QB newQuery()
     * @method static _IH_AuthCode_QB query()
     * @method static _IH_AuthCode_C|AuthCode[] all()
     * @method static AuthCode baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static AuthCode create(array $attributes = [])
     * @method static _IH_AuthCode_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_AuthCode_C|AuthCode[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_AuthCode_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_AuthCode_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static AuthCode|null find($id, array $columns = ['*'])
     * @method static _IH_AuthCode_C|AuthCode[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static AuthCode findOrFail($id, array $columns = ['*'])
     * @method static AuthCode findOrNew($id, array $columns = ['*'])
     * @method static AuthCode first(array|string $columns = ['*'])
     * @method static AuthCode firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static AuthCode firstOrCreate(array $attributes = [], array $values = [])
     * @method static AuthCode firstOrFail(array $columns = ['*'])
     * @method static AuthCode firstOrNew(array $attributes = [], array $values = [])
     * @method static AuthCode firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static AuthCode forceCreate(array $attributes)
     * @method static _IH_AuthCode_C|AuthCode[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_AuthCode_C|AuthCode[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static AuthCode getModel()
     * @method static AuthCode[] getModels(array|string $columns = ['*'])
     * @method static _IH_AuthCode_QB getQuery()
     * @method static _IH_AuthCode_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_AuthCode_C|AuthCode[] hydrate(array $items)
     * @method static _IH_AuthCode_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_AuthCode_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_AuthCode_QB latest(Expression|string $column = null)
     * @method static _IH_AuthCode_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_AuthCode_QB limit(int $value)
     * @method static AuthCode make(array $attributes = [])
     * @method static AuthCode newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_AuthCode_QB offset(int $value)
     * @method static _IH_AuthCode_QB oldest(Expression|string $column = null)
     * @method static _IH_AuthCode_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_AuthCode_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_AuthCode_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|AuthCode[]|_IH_AuthCode_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_AuthCode_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_AuthCode_QB select(array|mixed $columns = ['*'])
     * @method static _IH_AuthCode_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|AuthCode[]|_IH_AuthCode_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_AuthCode_QB skip(int $value)
     * @method static AuthCode sole(array|string $columns = ['*'])
     * @method static _IH_AuthCode_QB take(int $value)
     * @method static _IH_AuthCode_QB tap(callable $callback)
     * @method static _IH_AuthCode_QB truncate()
     * @method static _IH_AuthCode_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static AuthCode updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_AuthCode_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_AuthCode_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_AuthCode_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_AuthCode_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_AuthCode_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_AuthCode_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereKey($id)
     * @method static _IH_AuthCode_QB whereKeyNot($id)
     * @method static _IH_AuthCode_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_AuthCode_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_AuthCode_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_AuthCode_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_AuthCode_QB withAvg(array|string $relation, string $column)
     * @method static _IH_AuthCode_QB withCasts(array $casts)
     * @method static _IH_AuthCode_QB withCount($relations)
     * @method static _IH_AuthCode_QB withExists(array|string $relation)
     * @method static _IH_AuthCode_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_AuthCode_QB withMax(array|string $relation, string $column)
     * @method static _IH_AuthCode_QB withMin(array|string $relation, string $column)
     * @method static _IH_AuthCode_QB withOnly($relations)
     * @method static _IH_AuthCode_QB withSum(array|string $relation, string $column)
     * @method static _IH_AuthCode_QB without($relations)
     * @method static _IH_AuthCode_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_AuthCode_QB withoutGlobalScopes(array $scopes = null)
     */
    class AuthCode extends Model {}
    
    /**
     * @property-read null|string $plain_secret
     * @method _IH_Client_QB newModelQuery()
     * @method _IH_Client_QB newQuery()
     * @method static _IH_Client_QB query()
     * @method static _IH_Client_C|Client[] all()
     * @method static Client baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Client create(array $attributes = [])
     * @method static _IH_Client_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Client_C|Client[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Client_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Client_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Client|null find($id, array $columns = ['*'])
     * @method static _IH_Client_C|Client[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Client findOrFail($id, array $columns = ['*'])
     * @method static Client findOrNew($id, array $columns = ['*'])
     * @method static Client first(array|string $columns = ['*'])
     * @method static Client firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Client firstOrCreate(array $attributes = [], array $values = [])
     * @method static Client firstOrFail(array $columns = ['*'])
     * @method static Client firstOrNew(array $attributes = [], array $values = [])
     * @method static Client firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Client forceCreate(array $attributes)
     * @method static _IH_Client_C|Client[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Client_C|Client[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Client getModel()
     * @method static Client[] getModels(array|string $columns = ['*'])
     * @method static _IH_Client_QB getQuery()
     * @method static _IH_Client_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Client_C|Client[] hydrate(array $items)
     * @method static _IH_Client_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Client_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Client_QB latest(Expression|string $column = null)
     * @method static _IH_Client_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Client_QB limit(int $value)
     * @method static Client make(array $attributes = [])
     * @method static Client newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Client_QB offset(int $value)
     * @method static _IH_Client_QB oldest(Expression|string $column = null)
     * @method static _IH_Client_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Client_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Client_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Client[]|_IH_Client_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Client_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Client_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Client_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Client[]|_IH_Client_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Client_QB skip(int $value)
     * @method static Client sole(array|string $columns = ['*'])
     * @method static _IH_Client_QB take(int $value)
     * @method static _IH_Client_QB tap(callable $callback)
     * @method static _IH_Client_QB truncate()
     * @method static _IH_Client_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Client updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Client_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Client_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Client_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Client_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Client_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Client_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Client_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Client_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereKey($id)
     * @method static _IH_Client_QB whereKeyNot($id)
     * @method static _IH_Client_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Client_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Client_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Client_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Client_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Client_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Client_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Client_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Client_QB withCasts(array $casts)
     * @method static _IH_Client_QB withCount($relations)
     * @method static _IH_Client_QB withExists(array|string $relation)
     * @method static _IH_Client_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Client_QB withMax(array|string $relation, string $column)
     * @method static _IH_Client_QB withMin(array|string $relation, string $column)
     * @method static _IH_Client_QB withOnly($relations)
     * @method static _IH_Client_QB withSum(array|string $relation, string $column)
     * @method static _IH_Client_QB without($relations)
     * @method static _IH_Client_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Client_QB withoutGlobalScopes(array $scopes = null)
     * @method static ClientFactory factory(...$parameters)
     */
    class Client extends Model {}
    
    /**
     * @method _IH_PersonalAccessClient_QB newModelQuery()
     * @method _IH_PersonalAccessClient_QB newQuery()
     * @method static _IH_PersonalAccessClient_QB query()
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] all()
     * @method static PersonalAccessClient baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static PersonalAccessClient create(array $attributes = [])
     * @method static _IH_PersonalAccessClient_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_PersonalAccessClient_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_PersonalAccessClient_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static PersonalAccessClient|null find($id, array $columns = ['*'])
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static PersonalAccessClient findOrFail($id, array $columns = ['*'])
     * @method static PersonalAccessClient findOrNew($id, array $columns = ['*'])
     * @method static PersonalAccessClient first(array|string $columns = ['*'])
     * @method static PersonalAccessClient firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static PersonalAccessClient firstOrCreate(array $attributes = [], array $values = [])
     * @method static PersonalAccessClient firstOrFail(array $columns = ['*'])
     * @method static PersonalAccessClient firstOrNew(array $attributes = [], array $values = [])
     * @method static PersonalAccessClient firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static PersonalAccessClient forceCreate(array $attributes)
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static PersonalAccessClient getModel()
     * @method static PersonalAccessClient[] getModels(array|string $columns = ['*'])
     * @method static _IH_PersonalAccessClient_QB getQuery()
     * @method static _IH_PersonalAccessClient_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_PersonalAccessClient_C|PersonalAccessClient[] hydrate(array $items)
     * @method static _IH_PersonalAccessClient_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_PersonalAccessClient_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_PersonalAccessClient_QB latest(Expression|string $column = null)
     * @method static _IH_PersonalAccessClient_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessClient_QB limit(int $value)
     * @method static PersonalAccessClient make(array $attributes = [])
     * @method static PersonalAccessClient newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_PersonalAccessClient_QB offset(int $value)
     * @method static _IH_PersonalAccessClient_QB oldest(Expression|string $column = null)
     * @method static _IH_PersonalAccessClient_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_PersonalAccessClient_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_PersonalAccessClient_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|PersonalAccessClient[]|_IH_PersonalAccessClient_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_PersonalAccessClient_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessClient_QB select(array|mixed $columns = ['*'])
     * @method static _IH_PersonalAccessClient_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|PersonalAccessClient[]|_IH_PersonalAccessClient_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_PersonalAccessClient_QB skip(int $value)
     * @method static PersonalAccessClient sole(array|string $columns = ['*'])
     * @method static _IH_PersonalAccessClient_QB take(int $value)
     * @method static _IH_PersonalAccessClient_QB tap(callable $callback)
     * @method static _IH_PersonalAccessClient_QB truncate()
     * @method static _IH_PersonalAccessClient_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static PersonalAccessClient updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_PersonalAccessClient_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_PersonalAccessClient_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_PersonalAccessClient_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_PersonalAccessClient_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_PersonalAccessClient_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_PersonalAccessClient_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereKey($id)
     * @method static _IH_PersonalAccessClient_QB whereKeyNot($id)
     * @method static _IH_PersonalAccessClient_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessClient_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessClient_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_PersonalAccessClient_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_PersonalAccessClient_QB withAvg(array|string $relation, string $column)
     * @method static _IH_PersonalAccessClient_QB withCasts(array $casts)
     * @method static _IH_PersonalAccessClient_QB withCount($relations)
     * @method static _IH_PersonalAccessClient_QB withExists(array|string $relation)
     * @method static _IH_PersonalAccessClient_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_PersonalAccessClient_QB withMax(array|string $relation, string $column)
     * @method static _IH_PersonalAccessClient_QB withMin(array|string $relation, string $column)
     * @method static _IH_PersonalAccessClient_QB withOnly($relations)
     * @method static _IH_PersonalAccessClient_QB withSum(array|string $relation, string $column)
     * @method static _IH_PersonalAccessClient_QB without($relations)
     * @method static _IH_PersonalAccessClient_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_PersonalAccessClient_QB withoutGlobalScopes(array $scopes = null)
     */
    class PersonalAccessClient extends Model {}
    
    /**
     * @method _IH_RefreshToken_QB newModelQuery()
     * @method _IH_RefreshToken_QB newQuery()
     * @method static _IH_RefreshToken_QB query()
     * @method static _IH_RefreshToken_C|RefreshToken[] all()
     * @method static RefreshToken baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static RefreshToken create(array $attributes = [])
     * @method static _IH_RefreshToken_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_RefreshToken_C|RefreshToken[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_RefreshToken_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_RefreshToken_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static RefreshToken|null find($id, array $columns = ['*'])
     * @method static _IH_RefreshToken_C|RefreshToken[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static RefreshToken findOrFail($id, array $columns = ['*'])
     * @method static RefreshToken findOrNew($id, array $columns = ['*'])
     * @method static RefreshToken first(array|string $columns = ['*'])
     * @method static RefreshToken firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static RefreshToken firstOrCreate(array $attributes = [], array $values = [])
     * @method static RefreshToken firstOrFail(array $columns = ['*'])
     * @method static RefreshToken firstOrNew(array $attributes = [], array $values = [])
     * @method static RefreshToken firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static RefreshToken forceCreate(array $attributes)
     * @method static _IH_RefreshToken_C|RefreshToken[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_RefreshToken_C|RefreshToken[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static RefreshToken getModel()
     * @method static RefreshToken[] getModels(array|string $columns = ['*'])
     * @method static _IH_RefreshToken_QB getQuery()
     * @method static _IH_RefreshToken_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_RefreshToken_C|RefreshToken[] hydrate(array $items)
     * @method static _IH_RefreshToken_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_RefreshToken_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_RefreshToken_QB latest(Expression|string $column = null)
     * @method static _IH_RefreshToken_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_RefreshToken_QB limit(int $value)
     * @method static RefreshToken make(array $attributes = [])
     * @method static RefreshToken newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_RefreshToken_QB offset(int $value)
     * @method static _IH_RefreshToken_QB oldest(Expression|string $column = null)
     * @method static _IH_RefreshToken_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_RefreshToken_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_RefreshToken_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|RefreshToken[]|_IH_RefreshToken_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_RefreshToken_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_RefreshToken_QB select(array|mixed $columns = ['*'])
     * @method static _IH_RefreshToken_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|RefreshToken[]|_IH_RefreshToken_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_RefreshToken_QB skip(int $value)
     * @method static RefreshToken sole(array|string $columns = ['*'])
     * @method static _IH_RefreshToken_QB take(int $value)
     * @method static _IH_RefreshToken_QB tap(callable $callback)
     * @method static _IH_RefreshToken_QB truncate()
     * @method static _IH_RefreshToken_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static RefreshToken updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_RefreshToken_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_RefreshToken_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_RefreshToken_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_RefreshToken_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_RefreshToken_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_RefreshToken_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereKey($id)
     * @method static _IH_RefreshToken_QB whereKeyNot($id)
     * @method static _IH_RefreshToken_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_RefreshToken_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_RefreshToken_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_RefreshToken_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_RefreshToken_QB withAvg(array|string $relation, string $column)
     * @method static _IH_RefreshToken_QB withCasts(array $casts)
     * @method static _IH_RefreshToken_QB withCount($relations)
     * @method static _IH_RefreshToken_QB withExists(array|string $relation)
     * @method static _IH_RefreshToken_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_RefreshToken_QB withMax(array|string $relation, string $column)
     * @method static _IH_RefreshToken_QB withMin(array|string $relation, string $column)
     * @method static _IH_RefreshToken_QB withOnly($relations)
     * @method static _IH_RefreshToken_QB withSum(array|string $relation, string $column)
     * @method static _IH_RefreshToken_QB without($relations)
     * @method static _IH_RefreshToken_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_RefreshToken_QB withoutGlobalScopes(array $scopes = null)
     */
    class RefreshToken extends Model {}
    
    /**
     * @property User $user
     * @method BelongsTo|_IH_User_QB user()
     * @method _IH_Token_QB newModelQuery()
     * @method _IH_Token_QB newQuery()
     * @method static _IH_Token_QB query()
     * @method static _IH_Token_C|Token[] all()
     * @method static Token baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Token create(array $attributes = [])
     * @method static _IH_Token_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Token_C|Token[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Token_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Token_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Token|null find($id, array $columns = ['*'])
     * @method static _IH_Token_C|Token[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Token findOrFail($id, array $columns = ['*'])
     * @method static Token findOrNew($id, array $columns = ['*'])
     * @method static Token first(array|string $columns = ['*'])
     * @method static Token firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Token firstOrCreate(array $attributes = [], array $values = [])
     * @method static Token firstOrFail(array $columns = ['*'])
     * @method static Token firstOrNew(array $attributes = [], array $values = [])
     * @method static Token firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Token forceCreate(array $attributes)
     * @method static _IH_Token_C|Token[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Token_C|Token[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Token getModel()
     * @method static Token[] getModels(array|string $columns = ['*'])
     * @method static _IH_Token_QB getQuery()
     * @method static _IH_Token_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Token_C|Token[] hydrate(array $items)
     * @method static _IH_Token_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Token_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Token_QB latest(Expression|string $column = null)
     * @method static _IH_Token_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Token_QB limit(int $value)
     * @method static Token make(array $attributes = [])
     * @method static Token newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Token_QB offset(int $value)
     * @method static _IH_Token_QB oldest(Expression|string $column = null)
     * @method static _IH_Token_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Token_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Token_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Token[]|_IH_Token_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Token_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Token_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Token_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Token[]|_IH_Token_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Token_QB skip(int $value)
     * @method static Token sole(array|string $columns = ['*'])
     * @method static _IH_Token_QB take(int $value)
     * @method static _IH_Token_QB tap(callable $callback)
     * @method static _IH_Token_QB truncate()
     * @method static _IH_Token_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Token updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Token_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Token_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Token_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Token_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Token_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Token_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Token_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Token_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereKey($id)
     * @method static _IH_Token_QB whereKeyNot($id)
     * @method static _IH_Token_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Token_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Token_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Token_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Token_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Token_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Token_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Token_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Token_QB withCasts(array $casts)
     * @method static _IH_Token_QB withCount($relations)
     * @method static _IH_Token_QB withExists(array|string $relation)
     * @method static _IH_Token_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Token_QB withMax(array|string $relation, string $column)
     * @method static _IH_Token_QB withMin(array|string $relation, string $column)
     * @method static _IH_Token_QB withOnly($relations)
     * @method static _IH_Token_QB withSum(array|string $relation, string $column)
     * @method static _IH_Token_QB without($relations)
     * @method static _IH_Token_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Token_QB withoutGlobalScopes(array $scopes = null)
     */
    class Token extends Model {}
}

namespace Laravel\Sanctum {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Support\Carbon;
    use LaravelIdea\Helper\Laravel\Sanctum\_IH_PersonalAccessToken_C;
    use LaravelIdea\Helper\Laravel\Sanctum\_IH_PersonalAccessToken_QB;
    
    /**
     * @property int $id
     * @property int $tokenable_id
     * @property string $tokenable_type
     * @property string $name
     * @property string $token
     * @property mixed|null $abilities
     * @property Carbon|null $last_used_at
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property Model $tokenable
     * @method MorphTo tokenable()
     * @method _IH_PersonalAccessToken_QB newModelQuery()
     * @method _IH_PersonalAccessToken_QB newQuery()
     * @method static _IH_PersonalAccessToken_QB query()
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] all()
     * @method static _IH_PersonalAccessToken_QB whereId($value)
     * @method static _IH_PersonalAccessToken_QB whereTokenableId($value)
     * @method static _IH_PersonalAccessToken_QB whereTokenableType($value)
     * @method static _IH_PersonalAccessToken_QB whereName($value)
     * @method static _IH_PersonalAccessToken_QB whereToken($value)
     * @method static _IH_PersonalAccessToken_QB whereAbilities($value)
     * @method static _IH_PersonalAccessToken_QB whereLastUsedAt($value)
     * @method static _IH_PersonalAccessToken_QB whereCreatedAt($value)
     * @method static _IH_PersonalAccessToken_QB whereUpdatedAt($value)
     * @method static PersonalAccessToken baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static PersonalAccessToken create(array $attributes = [])
     * @method static _IH_PersonalAccessToken_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_PersonalAccessToken_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_PersonalAccessToken_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static PersonalAccessToken|null find($id, array $columns = ['*'])
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static PersonalAccessToken findOrFail($id, array $columns = ['*'])
     * @method static PersonalAccessToken findOrNew($id, array $columns = ['*'])
     * @method static PersonalAccessToken first(array|string $columns = ['*'])
     * @method static PersonalAccessToken firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static PersonalAccessToken firstOrCreate(array $attributes = [], array $values = [])
     * @method static PersonalAccessToken firstOrFail(array $columns = ['*'])
     * @method static PersonalAccessToken firstOrNew(array $attributes = [], array $values = [])
     * @method static PersonalAccessToken firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static PersonalAccessToken forceCreate(array $attributes)
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static PersonalAccessToken getModel()
     * @method static PersonalAccessToken[] getModels(array|string $columns = ['*'])
     * @method static _IH_PersonalAccessToken_QB getQuery()
     * @method static _IH_PersonalAccessToken_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_PersonalAccessToken_C|PersonalAccessToken[] hydrate(array $items)
     * @method static _IH_PersonalAccessToken_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_PersonalAccessToken_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_PersonalAccessToken_QB latest(Expression|string $column = null)
     * @method static _IH_PersonalAccessToken_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessToken_QB limit(int $value)
     * @method static PersonalAccessToken make(array $attributes = [])
     * @method static PersonalAccessToken newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_PersonalAccessToken_QB offset(int $value)
     * @method static _IH_PersonalAccessToken_QB oldest(Expression|string $column = null)
     * @method static _IH_PersonalAccessToken_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_PersonalAccessToken_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_PersonalAccessToken_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|PersonalAccessToken[]|_IH_PersonalAccessToken_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_PersonalAccessToken_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_PersonalAccessToken_QB select(array|mixed $columns = ['*'])
     * @method static _IH_PersonalAccessToken_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|PersonalAccessToken[]|_IH_PersonalAccessToken_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_PersonalAccessToken_QB skip(int $value)
     * @method static PersonalAccessToken sole(array|string $columns = ['*'])
     * @method static _IH_PersonalAccessToken_QB take(int $value)
     * @method static _IH_PersonalAccessToken_QB tap(callable $callback)
     * @method static _IH_PersonalAccessToken_QB truncate()
     * @method static _IH_PersonalAccessToken_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static PersonalAccessToken updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_PersonalAccessToken_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_PersonalAccessToken_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_PersonalAccessToken_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_PersonalAccessToken_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_PersonalAccessToken_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_PersonalAccessToken_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereKey($id)
     * @method static _IH_PersonalAccessToken_QB whereKeyNot($id)
     * @method static _IH_PersonalAccessToken_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_PersonalAccessToken_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_PersonalAccessToken_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_PersonalAccessToken_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_PersonalAccessToken_QB withAvg(array|string $relation, string $column)
     * @method static _IH_PersonalAccessToken_QB withCasts(array $casts)
     * @method static _IH_PersonalAccessToken_QB withCount($relations)
     * @method static _IH_PersonalAccessToken_QB withExists(array|string $relation)
     * @method static _IH_PersonalAccessToken_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_PersonalAccessToken_QB withMax(array|string $relation, string $column)
     * @method static _IH_PersonalAccessToken_QB withMin(array|string $relation, string $column)
     * @method static _IH_PersonalAccessToken_QB withOnly($relations)
     * @method static _IH_PersonalAccessToken_QB withSum(array|string $relation, string $column)
     * @method static _IH_PersonalAccessToken_QB without($relations)
     * @method static _IH_PersonalAccessToken_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_PersonalAccessToken_QB withoutGlobalScopes(array $scopes = null)
     */
    class PersonalAccessToken extends Model {}
}

namespace Spatie\Permission\Models {

    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\Relations\BelongsToMany;
    use Illuminate\Database\Eloquent\Relations\MorphTo;
    use Illuminate\Database\Eloquent\Relations\MorphToMany;
    use Illuminate\Database\Eloquent\Scope;
    use Illuminate\Database\Query\Expression;
    use Illuminate\Pagination\LengthAwarePaginator;
    use Illuminate\Pagination\Paginator;
    use Illuminate\Support\Carbon;
    use Illuminate\Support\Collection;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Permission_C;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Permission_QB;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Role_C;
    use LaravelIdea\Helper\Spatie\Permission\Models\_IH_Role_QB;
    use Spatie\Permission\Contracts\Permission as Permission1;
    use Spatie\Permission\Contracts\Role as Role1;
    
    /**
     * @property int $id
     * @property string $name
     * @property string $guard_name
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property _IH_Permission_C|Permission[] $permissions
     * @property-read int $permissions_count
     * @method MorphToMany|_IH_Permission_QB permissions()
     * @property _IH_Role_C|Role[] $roles
     * @property-read int $roles_count
     * @method BelongsToMany|_IH_Role_QB roles()
     * @method _IH_Permission_QB newModelQuery()
     * @method _IH_Permission_QB newQuery()
     * @method static _IH_Permission_QB query()
     * @method static _IH_Permission_C|Permission[] all()
     * @method static _IH_Permission_QB whereId($value)
     * @method static _IH_Permission_QB whereName($value)
     * @method static _IH_Permission_QB whereGuardName($value)
     * @method static _IH_Permission_QB whereCreatedAt($value)
     * @method static _IH_Permission_QB whereUpdatedAt($value)
     * @method static Permission baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Permission create(array $attributes = [])
     * @method static _IH_Permission_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Permission_C|Permission[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Permission_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Permission_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Permission|null find($id, array $columns = ['*'])
     * @method static _IH_Permission_C|Permission[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Permission findOrFail($id, array $columns = ['*'])
     * @method static Permission findOrNew($id, array $columns = ['*'])
     * @method static Permission first(array|string $columns = ['*'])
     * @method static Permission firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Permission firstOrCreate(array $attributes = [], array $values = [])
     * @method static Permission firstOrFail(array $columns = ['*'])
     * @method static Permission firstOrNew(array $attributes = [], array $values = [])
     * @method static Permission firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Permission forceCreate(array $attributes)
     * @method static _IH_Permission_C|Permission[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Permission_C|Permission[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Permission getModel()
     * @method static Permission[] getModels(array|string $columns = ['*'])
     * @method static _IH_Permission_QB getQuery()
     * @method static _IH_Permission_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Permission_C|Permission[] hydrate(array $items)
     * @method static _IH_Permission_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Permission_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Permission_QB latest(Expression|string $column = null)
     * @method static _IH_Permission_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Permission_QB limit(int $value)
     * @method static Permission make(array $attributes = [])
     * @method static Permission newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Permission_QB offset(int $value)
     * @method static _IH_Permission_QB oldest(Expression|string $column = null)
     * @method static _IH_Permission_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Permission_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Permission_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Permission[]|_IH_Permission_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Permission_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Permission_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Permission_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Permission[]|_IH_Permission_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Permission_QB skip(int $value)
     * @method static Permission sole(array|string $columns = ['*'])
     * @method static _IH_Permission_QB take(int $value)
     * @method static _IH_Permission_QB tap(callable $callback)
     * @method static _IH_Permission_QB truncate()
     * @method static _IH_Permission_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Permission updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Permission_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Permission_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Permission_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Permission_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Permission_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Permission_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Permission_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Permission_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereKey($id)
     * @method static _IH_Permission_QB whereKeyNot($id)
     * @method static _IH_Permission_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Permission_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Permission_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Permission_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Permission_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Permission_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Permission_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Permission_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Permission_QB withCasts(array $casts)
     * @method static _IH_Permission_QB withCount($relations)
     * @method static _IH_Permission_QB withExists(array|string $relation)
     * @method static _IH_Permission_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Permission_QB withMax(array|string $relation, string $column)
     * @method static _IH_Permission_QB withMin(array|string $relation, string $column)
     * @method static _IH_Permission_QB withOnly($relations)
     * @method static _IH_Permission_QB withSum(array|string $relation, string $column)
     * @method static _IH_Permission_QB without($relations)
     * @method static _IH_Permission_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Permission_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Permission_QB permission(array|Collection|Permission1|string $permissions)
     * @method static _IH_Permission_QB role(array|Collection|Role1|string $roles, string $guard = null)
     */
    class Permission extends Model {}
    
    /**
     * @property int $id
     * @property string $name
     * @property string $guard_name
     * @property Carbon|null $created_at
     * @property Carbon|null $updated_at
     * @property _IH_Permission_C|Permission[] $permissions
     * @property-read int $permissions_count
     * @method BelongsToMany|_IH_Permission_QB permissions()
     * @method _IH_Role_QB newModelQuery()
     * @method _IH_Role_QB newQuery()
     * @method static _IH_Role_QB query()
     * @method static _IH_Role_C|Role[] all()
     * @method static _IH_Role_QB whereId($value)
     * @method static _IH_Role_QB whereName($value)
     * @method static _IH_Role_QB whereGuardName($value)
     * @method static _IH_Role_QB whereCreatedAt($value)
     * @method static _IH_Role_QB whereUpdatedAt($value)
     * @method static Role baseSole(array|string $columns = ['*'])
     * @method static bool chunk(int $count, callable $callback)
     * @method static bool chunkById(int $count, callable $callback, null|string $column = null, null|string $alias = null)
     * @method static int count(string $columns = '*')
     * @method static Role create(array $attributes = [])
     * @method static _IH_Role_QB crossJoin(string $table, \Closure|null|string $first = null, null|string $operator = null, null|string $second = null)
     * @method static _IH_Role_C|Role[] cursor()
     * @method static int decrement(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static _IH_Role_QB distinct()
     * @method static bool doesntExist()
     * @method static _IH_Role_QB each(callable $callback, int $count = 1000)
     * @method static bool eachById(callable $callback, int $count = 1000, null|string $column = null, null|string $alias = null)
     * @method static bool exists()
     * @method static Role|null find($id, array $columns = ['*'])
     * @method static _IH_Role_C|Role[] findMany(array|Arrayable $ids, array $columns = ['*'])
     * @method static Role findOrFail($id, array $columns = ['*'])
     * @method static Role findOrNew($id, array $columns = ['*'])
     * @method static Role first(array|string $columns = ['*'])
     * @method static Role firstOr(array|\Closure $columns = ['*'], \Closure $callback = null)
     * @method static Role firstOrCreate(array $attributes = [], array $values = [])
     * @method static Role firstOrFail(array $columns = ['*'])
     * @method static Role firstOrNew(array $attributes = [], array $values = [])
     * @method static Role firstWhere(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static Role forceCreate(array $attributes)
     * @method static _IH_Role_C|Role[] fromQuery(string $query, array $bindings = [])
     * @method static _IH_Role_C|Role[] get(array|string $columns = ['*'])
     * @method static int getCountForPagination(array $columns = ['*'])
     * @method static Role getModel()
     * @method static Role[] getModels(array|string $columns = ['*'])
     * @method static _IH_Role_QB getQuery()
     * @method static _IH_Role_QB groupBy(...$groups)
     * @method static bool hasGlobalMacro(string $name)
     * @method static bool hasMacro(string $name)
     * @method static bool hasNamedScope(string $scope)
     * @method static _IH_Role_C|Role[] hydrate(array $items)
     * @method static _IH_Role_QB inRandomOrder(string $seed = '')
     * @method static int increment(Expression|string $column, float|int $amount = 1, array $extra = [])
     * @method static bool insert(array $values)
     * @method static int insertGetId(array $values, null|string $sequence = null)
     * @method static int insertOrIgnore(array $values)
     * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|string $query)
     * @method static _IH_Role_QB join(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null, string $type = 'inner', bool $where = false)
     * @method static _IH_Role_QB latest(Expression|string $column = null)
     * @method static _IH_Role_QB leftJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Role_QB limit(int $value)
     * @method static Role make(array $attributes = [])
     * @method static Role newModelInstance(array $attributes = [])
     * @method static int numericAggregate(string $function, array $columns = ['*'])
     * @method static _IH_Role_QB offset(int $value)
     * @method static _IH_Role_QB oldest(Expression|string $column = null)
     * @method static _IH_Role_QB orderBy(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column, string $direction = 'asc')
     * @method static _IH_Role_QB orderByDesc(\Closure|\Illuminate\Database\Query\Builder|Expression|string $column)
     * @method static _IH_Role_QB orderByRaw(string $sql, array $bindings = [])
     * @method static LengthAwarePaginator|Role[]|_IH_Role_C paginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Role_QB rightJoin(string $table, \Closure|string $first, null|string $operator = null, null|string $second = null)
     * @method static _IH_Role_QB select(array|mixed $columns = ['*'])
     * @method static _IH_Role_QB setQuery(\Illuminate\Database\Query\Builder $query)
     * @method static Paginator|Role[]|_IH_Role_C simplePaginate(int|null $perPage = null, array $columns = ['*'], string $pageName = 'page', int|null $page = null)
     * @method static _IH_Role_QB skip(int $value)
     * @method static Role sole(array|string $columns = ['*'])
     * @method static _IH_Role_QB take(int $value)
     * @method static _IH_Role_QB tap(callable $callback)
     * @method static _IH_Role_QB truncate()
     * @method static _IH_Role_QB unless($value, callable $callback, callable|null $default = null)
     * @method static int update(array $values)
     * @method static Role updateOrCreate(array $attributes, array $values = [])
     * @method static bool updateOrInsert(array $attributes, array $values = [])
     * @method static int upsert(array $values, array|string $uniqueBy, array|null $update = null)
     * @method static _IH_Role_QB when($value, callable $callback, callable|null $default = null)
     * @method static _IH_Role_QB where(array|\Closure|Expression|string $column, $operator = null, $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereBetween(Expression|string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereBetweenColumns(string $column, array $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereColumn(array|string $first, null|string $operator = null, null|string $second = null, null|string $boolean = 'and')
     * @method static _IH_Role_QB whereDate(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereDay(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereDoesntHave(string $relation, \Closure $callback = null)
     * @method static _IH_Role_QB whereDoesntHaveMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null)
     * @method static _IH_Role_QB whereExists(\Closure $callback, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereHas(string $relation, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Role_QB whereHasMorph(MorphTo|string $relation, array|string $types, \Closure $callback = null, string $operator = '>=', int $count = 1)
     * @method static _IH_Role_QB whereIn(string $column, $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereIntegerInRaw(string $column, array|Arrayable $values, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereIntegerNotInRaw(string $column, array|Arrayable $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereJsonContains(string $column, $value, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereJsonDoesntContain(string $column, $value, string $boolean = 'and')
     * @method static _IH_Role_QB whereJsonLength(string $column, $operator, $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereKey($id)
     * @method static _IH_Role_QB whereKeyNot($id)
     * @method static _IH_Role_QB whereMonth(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereNested(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotBetween(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotBetweenColumns(string $column, array $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotExists(\Closure $callback, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotIn(string $column, $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereNotNull(array|string $columns, string $boolean = 'and')
     * @method static _IH_Role_QB whereNull(array|string $columns, string $boolean = 'and', bool $not = false)
     * @method static _IH_Role_QB whereRaw(string $sql, $bindings = [], string $boolean = 'and')
     * @method static _IH_Role_QB whereRowValues(array $columns, string $operator, array $values, string $boolean = 'and')
     * @method static _IH_Role_QB whereTime(string $column, string $operator, \DateTimeInterface|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB whereYear(string $column, string $operator, \DateTimeInterface|int|null|string $value = null, string $boolean = 'and')
     * @method static _IH_Role_QB with(array|string $relations, \Closure|null|string $callback = null)
     * @method static _IH_Role_QB withAggregate($relations, string $column, string $function = null)
     * @method static _IH_Role_QB withAvg(array|string $relation, string $column)
     * @method static _IH_Role_QB withCasts(array $casts)
     * @method static _IH_Role_QB withCount($relations)
     * @method static _IH_Role_QB withExists(array|string $relation)
     * @method static _IH_Role_QB withGlobalScope(string $identifier, \Closure|Scope $scope)
     * @method static _IH_Role_QB withMax(array|string $relation, string $column)
     * @method static _IH_Role_QB withMin(array|string $relation, string $column)
     * @method static _IH_Role_QB withOnly($relations)
     * @method static _IH_Role_QB withSum(array|string $relation, string $column)
     * @method static _IH_Role_QB without($relations)
     * @method static _IH_Role_QB withoutGlobalScope(Scope|string $scope)
     * @method static _IH_Role_QB withoutGlobalScopes(array $scopes = null)
     * @method static _IH_Role_QB permission(array|Collection|Permission1|string $permissions)
     */
    class Role extends Model {}
}